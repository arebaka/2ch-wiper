IyMgLSotIGNvZGluZzogdXRmLTggLSotCnRyeToKCWltcG9ydCB0aW1lCglpbXBvcnQgc3lzCglpbXBvcnQgdGhyZWFkaW5nCglpbXBvcnQgaW8KCWltcG9ydCByYW5kb20KCWltcG9ydCBzdHJpbmcKCWltcG9ydCBvcwoJaW1wb3J0IGpzb24KCWltcG9ydCBzaWduYWwKCWltcG9ydCByZXF1ZXN0cwoJaW1wb3J0IFBJTC5JbWFnZQoJZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAKCWltcG9ydCB1cmxsaWIzCgl1cmxsaWIzLmRpc2FibGVfd2FybmluZ3ModXJsbGliMy5leGNlcHRpb25zLkluc2VjdXJlUmVxdWVzdFdhcm5pbmcpCmV4Y2VwdCBFeGNlcHRpb246CglwcmludCgi0J3QtdGCINC90LXQvtCx0YXQvtC00LjQvNGL0YUg0LzQvtC00YPQu9C10LksINCx0YDQsNGC0LjRiNC60LAsINC40LTQuCDRgdGC0LDQstGMLiIpCglpbnB1dCgpCglleGl0KCkKCmRlZiBzYWZlX3F1aXQoYmFkcHJveGllcywgZm9yYmlkZGVucHJveHksIHNpZz0wLCBmcmFtZT0wKToKCXByaW50KCJcblxu0JbQtNGDLCDQv9C+0LrQsCDQvtCx0L3QvtCy0LjRgtGB0Y8g0LvQuNGB0YIg0YEg0L/RgNC+0LrRgdC40YfQutCw0LzQuC4uLiIpCglmID0gb3BlbigicHJveGllcyIsICJyKyIpCglkID0gZi5yZWFkbGluZXMoKQoJZi5zZWVrKDApCglmb3IgaSBpbiBkOgoJCWlmIGkucnN0cmlwKCkgbm90IGluIGJhZHByb3hpZXM6CgkJCWYud3JpdGUoaSkKCWYudHJ1bmNhdGUoKQoJZi5jbG9zZSgpCglkID0gb3BlbigiZm9yYmlkZGVuLmNzdiIsICJhIikKCWZvciBwcm94eSBpbiBmb3JiaWRkZW5wcm94eToKCQlkLndyaXRlKHByb3h5ICsgJ1xuJykKCWQuY2xvc2UoKQoJcHJpbnQoc3RyKChsZW4oYmFkcHJveGllcykgLSBsZW4oZm9yYmlkZGVucHJveHkpKSksICLQt9Cw0LHQsNC90LXQvdGL0YUg0L/RgNC+0LrRgdC40YfQtdC6INC/0L7Rh9C40YnQtdC90L4hIikKCXByaW50KHN0cihsZW4oZm9yYmlkZGVucHJveHkpKSwgItC30LDQv9GA0LXRidC10L3QvdGL0YUg0L/RgNC+0LrRgdC40YfQtdC6INC/0L7Rh9C40YnQtdC90L4hIikKCXByaW50KCLQktGL0LrQu9GO0YfQsNGO0YHRjC4uLiIpCglvcy5fZXhpdCgwKQpkZWYgZXRlcm5hbF9pbnB1dChiYWRwcm94aWVzLCBmb3JiaWRkZW5wcm94eSk6Cgl3aGlsZSBUcnVlOgoJCXByaW50KCJDaG9vc2UgeW91ciBvcHRpb24iKQoJCWNob2ljZSA9IGlucHV0KCJbU110YXRpc3RpY3MsIFtRXXVpdCwgW0NdbGVhciBwYXJhc2hhXG4iKQoJCWNob2ljZSA9IGNob2ljZS5yc3RyaXAoKQoJCXRyeToKCQkJaWYgY2hvaWNlLmxvd2VyKCkgPT0gInMiIG9yIGNob2ljZS5sb3dlcigpID09ICLRiyI6CgkJCQlTdGF0cy5wcmludFN0YXRzKGJhZHByb3hpZXMsIGZvcmJpZGRlbnByb3h5KQoJCQllbGlmIGNob2ljZS5sb3dlcigpID09ICJxIiBvciBjaG9pY2UubG93ZXIoKSA9PSAi0LkiOgoJCQkJc2FmZV9xdWl0KGJhZHByb3hpZXMsIGZvcmJpZGRlbnByb3h5KQoJCQkJYmFkcHJveGllcy5jbGVhcigpCgkJCQlmb3JiaWRkZW5wcm94eS5jbGVhcigpCgkJCWVsaWYgY2hvaWNlLmxvd2VyKCkgPT0gImMiIG9yIGNob2ljZS5sb3dlcigpID09ICLRgSI6CgkJCQliYWRwcm94aWVzLmNsZWFyKCkKCQkJCXByaW50KCLQn9Cw0YDQsNGI0LAg0L/QvtGH0LjRidC10L3QsCIpCgkJCWVsc2U6CgkJCQlwcmludCgi0KLRiyDQv9C40YjQtdGI0Ywg0YXRg9C50L3RjiIpCgkJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgoJCQlwcmludChlKQpjbGFzcyBTdGF0czoKCW51bU9mUHJveGllcyA9IDAKCW51bU9mVGhyZWFkcyA9IDAKCXBvc3RzU2VudCA9IDAKCWNhcHRjaGFzU29sdmVkID0gMAoJZGVmIHNldFByb3hpZXMoYW1vdW50KToKCQlTdGF0cy5udW1PZlByb3hpZXMgPSBhbW91bnQKCWRlZiBzZXRudW1PZlRocmVhZHMoYW1vdW50KToKCQlTdGF0cy5udW1PZlRocmVhZHMgPSBhbW91bnQKCWRlZiBpbmNDYXB0Y2hhcygpOgoJCVN0YXRzLmNhcHRjaGFzU29sdmVkICs9IDEKCWRlZiBpbmNQb3N0cygpOgoJCVN0YXRzLnBvc3RzU2VudCArPSAxCglkZWYgcHJpbnRTdGF0cyhiYWRwcm94aWVzLCBmb3JiaWRkZW5wcm94eSk6CgkJcHJpbnQoIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iKQoJCXByaW50KCLQn9GA0L7QutGB0LjRh9C10Log0L7RgdGC0LDQu9C+0YHRjDpcdCIsIHN0cihTdGF0cy5udW1PZlByb3hpZXMgLSBsZW4oYmFkcHJveGllcykpKQoJCXByaW50KCLQndCw0YfQsNC70YzQvdGL0LUg0L/QvtGC0L7QutC4Olx0Iiwgc3RyKFN0YXRzLm51bU9mVGhyZWFkcykpCgkJcHJpbnQoItCa0LDQv9GC0Ycg0YDQtdGI0LXQvdC+Olx0XHQiLCBzdHIoU3RhdHMuY2FwdGNoYXNTb2x2ZWQpKQoJCXByaW50KCLQl9Cw0LHQsNC90LXQvdGL0LUg0L/RgNC+0LrRgdC40YfQutC4Olx0Iiwgc3RyKChsZW4oYmFkcHJveGllcykgLSBsZW4oZm9yYmlkZGVucHJveHkpKSkpCgkJcHJpbnQoItCU0L7RgdGC0YPQvyDQt9Cw0L/RgNC10YnQtdC9Olx0Iiwgc3RyKGxlbihmb3JiaWRkZW5wcm94eSkpKQoJCXByaW50KCLQotC10LrRg9GJ0LjQtSDQv9C+0YLQvtC60Lg6XHRcdCIsIHN0cih0aHJlYWRpbmcuYWN0aXZlX2NvdW50KCkpKQoJCWlmIHRocmVhZGluZy5hY3RpdmVfY291bnQoKSA8PSAyOgoJCQlwcmludCgi
QUxMIFRIUkVBRFMgRklOSVNIRUQsIFBSRVNTIFwiUVwiIikKCQlwcmludCgiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuIikKCmNsYXNzIENhdGFsb2c6CglkZWYgX19pbml0X18oc2VsZiwgYm9hcmQpOgoJCXNlbGYuYm9hcmQgPSBib2FyZAoJCXByaW50KCLQodC60LDRh9C40LLQsNGOINC00L7RgdC60YMiLCBzZWxmLmJvYXJkKQoJCXNlbGYuc2NoZW1hID0ganNvbi5sb2FkcyhyZXF1ZXN0cy5nZXQoJycuam9pbihbImh0dHBzOi8vMmNoLmhrLyIsIGJvYXJkLCAiL2NhdGFsb2cuanNvbiJdKSkudGV4dCkKCQlzZWxmLnRocmVhZHNDb3VudCA9IGxlbihzZWxmLnNjaGVtYVsidGhyZWFkcyJdKQpjbGFzcyBNZWRpYToKCWRlZiBfX2luaXRfXyhzZWxmLCBuYW1lLCBwYXRoKToKCQlzZWxmLm5hbWUgPSBuYW1lCgkJc2VsZi5wYXRoID0gcGF0aAoJCXNlbGYuY2FjaGVkID0gRmFsc2UKCWRlZiBkb3dubG9hZChzZWxmKToKCQlpZiBzZWxmLmNhY2hlZCA9PSBGYWxzZToKCQkJc2VsZi5maWxlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovLzJjaC5oayIrc2VsZi5wYXRoKS5jb250ZW50CgkJCXNlbGYuY2FjaGVkID0gVHJ1ZQpjbGFzcyBQb3N0OgoJZGVmIF9faW5pdF9fKHNlbGYsIHNjaGVtYSwgbW9kZSwgdHJpZ2dlckZvcm0pOgoJCXNlbGYuSUQgPSBzdHIoc2NoZW1hWyJudW0iXSkKCQlzZWxmLmNvbW1lbnQgPSBzZWxmLnNldF9jb21tZW50KHNjaGVtYVsiY29tbWVudCJdLCBtb2RlLCB0cmlnZ2VyRm9ybSkKCQlzZWxmLnNhZ2UgPSBzZWxmLnNldF9zYWdlKHNjaGVtYSkKCQlzZWxmLm51bSA9IHNjaGVtYVsibnVtYmVyIl0KCQlzZWxmLm1lZGlhcyA9IFtdCgkJZm9yIG1lZGlhIGluIHNjaGVtYVsiZmlsZXMiXToKCQkJc2VsZi5tZWRpYXMuYXBwZW5kKE1lZGlhKG1lZGlhWyJuYW1lIl0sIG1lZGlhWyJwYXRoIl0pKQoJCXByaW50KCLQotGA0LjQs9Cz0LXRgNC90YPQu9Cw0YHRjCDQvdCwIiwgIj4+IitzZWxmLklEKQoJZGVmIHNldF9jb21tZW50KHNlbGYsIHRleHQsIG1vZGUsIHRyaWdnZXJGb3JtKToKCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCI8YnI+IiwgIlxuIikKCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCI8c3Ryb25nPiIsICJbYl0iKQoJCXRleHQgPSB0ZXh0LnJlcGxhY2UoIjwvc3Ryb25nPiIsICJbL2JdIikKCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCI8ZW0+IiwgIltpXSIpCgkJdGV4dCA9IHRleHQucmVwbGFjZSgiPC9lbT4iLCAiWy9pXSIpCgkJdGV4dCA9IHRleHQucmVwbGFjZSgiPHN1cD4iLCAiW3N1cF0iKQoJCXRleHQgPSB0ZXh0LnJlcGxhY2UoIjwvc3VwPiIsICJbL3N1cF0iKQoJCXRleHQgPSB0ZXh0LnJlcGxhY2UoIjxzdWI+IiwgIltzdWJdIikKCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCI8L3N1Yj4iLCAiWy9zdWJdIikKCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCI8Y29kZT4iLCAiW2NvZGVdIikKCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCI8L2NvZGU+IiwgIlsvY29kZV0iKQoJCWlmIG1vZGUgPT0gNyBhbmQgdHJpZ2dlckZvcm0gPT0gMDoKCQkJdGV4dCA9IHRleHQucmVwbGFjZSgiIChPUCkiLCAiIikKCQkJc291cCA9IEJlYXV0aWZ1bFNvdXAodGV4dCwgZmVhdHVyZXM9Imh0bWwucGFyc2VyIikKCQllbHNlOgoJCQlzb3VwID0gQmVhdXRpZnVsU291cCh0ZXh0LCBmZWF0dXJlcz0iaHRtbC5wYXJzZXIiKQoJCQlmb3IgYSBpbiBzb3VwLmZpbmRfYWxsKCJhIiwgeyJjbGFzcyI6ICJwb3N0LXJlcGx5LWxpbmsifSk6CgkJCQlhLmRlY29tcG9zZSgpCgkJZm9yIHUgaW4gc291cC5maW5kX2FsbCgic3BhbiIsIHsiY2xhc3MiOiAidSJ9KToKCQkJdS5yZXBsYWNlX3dpdGgoIlt1XSIrdS5nZXRfdGV4dCgpKyJbL3VdIikKCQlmb3IgbyBpbiBzb3VwLmZpbmRfYWxsKCJzcGFuIiwgeyJjbGFzcyI6ICJvIn0pOgoJCQlvLnJlcGxhY2Vfd2l0aCgiW29dIitvLmdldF90ZXh0KCkrIlsvb10iKQoJCWZvciBzcG9pbGVyIGluIHNvdXAuZmluZF9hbGwoInNwYW4iLCB7ImNsYXNzIjogInNwb2lsZXIifSk6CgkJCXNwb2lsZXIucmVwbGFjZV93aXRoKCJbc3BvaWxlcl0iK3Nwb2lsZXIuZ2V0X3RleHQoKSsiWy9zcG9pbGVyXSIpCgkJZm9yIHMgaW4gc291cC5maW5kX2FsbCgic3BhbiIsIHsiY2xhc3MiOiAicyJ9KToKCQkJcy5yZXBsYWNlX3dpdGgoIltzXSIrcy5nZXRfdGV4dCgpKyJbL3NdIikKCQlyZXR1cm4gc3RyKHNvdXAuZ2V0X3RleHQoKSkubHN0cmlwKCdcbicpLnJzdHJpcCgnXG4nKQoJZGVmIHNldF9zYWdlKHNlbGYsIHNjaGVtYSk6CgkJcmV0dXJuIFRydWUgaWYgc2NoZW1hWyJlbWFpbCJdLmZpbmQoIm1haWx0bzpzYWdlIikgPT0gLTEgZWxzZSBGYWxzZQpjbGFzcyBUaHJlYWQ6CglkZWYgX19pbml0X18oc2VsZiwgYm9hcmQsIElELCBtb2RlLCB0cmlnZ2VyRm9ybSk6CgkJc2VsZi5ib2FyZCA9IGJvYXJkCgkJc2VsZi5JRCA9IElECgkJcHJpbnQoItCh0LrQsNGH0LjQstCw0Y4g0YLRgNC10LQiLCBzZWxmLklEKQoJCXNlbGYuc2NoZW1hID0ganNvbi5sb2FkcyhyZXF1ZXN0cy5nZXQoJycuam9pbihbImh0dHBzOi8vMmNoLmhrLyIsIGJvYXJkLCAiL3Jlcy8iLCBJRCwgIi5qc29uIl0pKS50ZXh0KQoJCXNlbGYucG9zdHNDb3VudCA9IHNlbGYuc2NoZW1hWyJwb3N0c19jb3VudCJdICsg
MQoJCXNlbGYubGFzdElEID0gc3RyKHNlbGYuc2NoZW1hWyJtYXhfbnVtIl0pCgkJc2VsZi5wb3N0cyA9IHNlbGYuZG93bmxvYWRfcG9zdHMobW9kZSwgdHJpZ2dlckZvcm0pCgkJc2VsZi5sb2FmID0gIiIKCQlmb3IgcG9zdE51bSBpbiByYW5nZShtaW4obGVuKHNlbGYucG9zdHMpLCAzMCkpOgoJCQlzZWxmLmxvYWYgKz0gKCI+PiIrc2VsZi5wb3N0c1twb3N0TnVtXS5JRCsiICIpCglkZWYgZG93bmxvYWRfcG9zdHMoc2VsZiwgbW9kZSwgdHJpZ2dlckZvcm0pOgoJCXBvc3RzID0gW10KCQlmb3IgcG9zdCBpbiBzZWxmLnNjaGVtYVsidGhyZWFkcyJdWzBdWyJwb3N0cyJdOgoJCQlwb3N0cy5hcHBlbmQoUG9zdChwb3N0LCBtb2RlLCB0cmlnZ2VyRm9ybSkpCgkJcmV0dXJuIHBvc3RzCgpkZWYgYWN0aXZhdGVfZGVidWcobG9nTW9kZSk6CglpbXBvcnQgbG9nZ2luZwoJcHJpbnQoIlxuKioqIERFQlVHIE1PREUgQUNUSVZBVEVEICoqKiIpCglpZiBsb2dNb2RlID09IDE6CgkJbG9nZ2luZy5iYXNpY0NvbmZpZyhmaWxlbmFtZT0nTE9HLnR4dCcsIGxldmVsPWxvZ2dpbmcuREVCVUcpCgllbGlmIGxvZ01vZGUgPT0gMjoKCQlsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuREVCVUcpCmNsYXNzIFNldHVwOgoJZGVmIF9faW5pdF9fKHNlbGYsIGFyZ3MpOgoJCWlmIGludChhcmdzWzVdKSAhPSAwOgoJCQlhY3RpdmF0ZV9kZWJ1ZyhpbnQoYXJnc1s1XSkpCgkJc2VsZi5jcEZpbGUsIHNlbGYuYmFuc0ZpbGUsIHNlbGYuZnVsbEZpbGUgPSBzZWxmLnNldF9lbmNvZGluZygpCgkJc2VsZi5ib2FyZCA9IGFyZ3NbMV0KCQlzZWxmLnRocmVhZCA9IGFyZ3NbMl0KCQlzZWxmLmNoYW9zID0gYXJnc1szXQoJCXNlbGYucG90b2Nrc0NvdW50ID0gaW50KGFyZ3NbNF0pCgkJc2VsZi5USU1FT1VULCBzZWxmLlBBVVNFID0gc2VsZi5zZXRfY29uc3RzKHNlbGYucG90b2Nrc0NvdW50KQoJCXNlbGYuc29sdmVyLCBzZWxmLmtleSwgc2VsZi5rZXlyZXEgPSBzZWxmLnNldF9rZXkoaW50KGFyZ3NbNl0pLCBhcmdzWzddKQoJCXNlbGYucHJveHlSZXBlYXRzQ291bnQgPSBpbnQoYXJnc1s4XSkKCQlzZWxmLm1vZGUsIHNlbGYucGFzdGVzLCBzZWxmLmJpZ1Bhc3RlID0gc2VsZi5zZXRfbW9kZShpbnQoYXJnc1s5XSkpCgkJaWYgc2VsZi5tb2RlID09IDg6CgkJCXNlbGYubWluQmFuID0gaW50KGFyZ3NbMTBdKQoJCQlzZWxmLm1heEJhbiA9IGludChhcmdzWzExXSkKCQlzZWxmLmNhdGFsb2cgPSAwCgkJc2VsZi50aHJlYWRzID0gW10KCQlpZiBzZWxmLnRocmVhZCAhPSAiMCI6CgkJCXNlbGYudHJpZ2dlckZvcm0sIHNlbGYuc2hyYXBuZWxDaGFyZ2UsIHNlbGYudGFyZ2V0VGhyZWFkID0gc2VsZi5zZXRfdHJpZ2dlcihpbnQoYXJnc1sxMl0pLCBpbnQoYXJnc1sxM10pLCBpbnQoYXJnc1sxNF0pLCBhcmdzKQoJCWVsc2U6CgkJCXNlbGYudHJpZ2dlckZvcm0gPSAwCgkJCXNlbGYuc2hyYXBuZWxDaGFyZ2UgPSAwCgkJc2VsZi5tZWRpYUtpbmQsIHNlbGYubWVkaWFQYXRocywgc2VsZi5tZWRpYXNDb3VudCA9IHNlbGYuc2V0X21lZGlhKGludChhcmdzWzE1XSksIGFyZ3NbMTZdLCBpbnQoYXJnc1sxN10pKQoJCXNlbGYuc2FnZU1vZGUgPSBpbnQoYXJnc1sxOF0pCgkJc2VsZi5zaGFrYWxQb3dlciA9IGludChhcmdzWzE5XSkKCQlpZiBhcmdzWzIwXSA9PSAiMSI6IHNlbGYuc2hha2FsQ29sb3IgPSBUcnVlCgkJZWxzZTogc2VsZi5zaGFrYWxDb2xvciA9IEZhbHNlCgkJaWYgYXJnc1syMV0gPT0gIjEiOiBzZWxmLnNoYWthbEFmZmluZSA9IFRydWUKCQllbHNlOiBzZWxmLnNoYWthbEFmZmluZSA9IEZhbHNlCgkJaWYgYXJnc1syMl0gPT0gIjEiOiBzZWxmLnRvUE5HID0gVHJ1ZQoJCWVsc2U6IHNlbGYudG9QTkcgPSBGYWxzZQoJZGVmIHNldF9lbmNvZGluZyhzZWxmKToKCQlzZWxmLmNwRmlsZSA9ICJ0ZXh0cy50eHQiCgkJc2VsZi5iYW5zRmlsZSA9ICJiYW5zLnR4dCIKCQlzZWxmLmZ1bGxGaWxlID0gInBhcmFzaGEudHh0IgoJCXJldHVybiBzZWxmLmNwRmlsZSwgc2VsZi5iYW5zRmlsZSwgc2VsZi5mdWxsRmlsZQoJZGVmIHNldF9jb25zdHMoc2VsZiwgcG90b2Nrc0NvdW50KToKCQlpZiBwb3RvY2tzQ291bnQgPT0gMDoKCQkJVElNRU9VVCA9IDYwCgkJCVBBVVNFID0gNjAKCQkJc2VsZi5wb3RvY2tzQ291bnQgPSA0CgkJZWxzZToKCQkJVElNRU9VVCA9IDEwCgkJCVBBVVNFID0gMjAKCQlyZXR1cm4gVElNRU9VVCwgUEFVU0UKCWRlZiBnZXRfa2V5KHNlbGYsIHNvbHZlcik6CgkJaWYgc29sdmVyID09IDA6CgkJCXNvbHZlclN0ciA9ICJ4Y2FwdGNoYSIKCQkJcHJpbnQoItCf0YvRgtCw0Y7RgdGMINC/0L7Qu9GD0YfQuNGC0Ywg0LrQsNC30LXQvdGL0Lkg0LrQu9GO0Ycg0LTQu9GPINC40LrRgdC60LDQv9GC0YfQuC4uLiIpCgkJZWxpZiBzb2x2ZXIgPT0gMToKCQkJc29sdmVyU3RyID0gImd1cm9jYXB0Y2hhIgoJCQlwcmludCgi0J/Ri9GC0LDRjtGB0Ywg0L/QvtC70YPRh9C40YLRjCDQutCw0LfQtdC90YvQuSDQutC70Y7RhyDQtNC70Y8g0LPRg9GA0L7QutCw0L/RgtGH0LguLi4iKQoJCWVsaWYgc29sdmVyID09IDI6CgkJCXNvbHZlclN0ciA9ICJhbnRpY2FwdGNoYSIKCQkJcHJpbnQoItCf0YvRgtCw0Y7RgdGMINC/0L7Qu9GD0YfQuNGC0Ywg
0LrQsNC30LXQvdGL0Lkg0LrQu9GO0Ycg0LTQu9GPINCw0L3RgtC40LrQsNC/0YfQuC4uLiIpCgkJa2V5cmVxID0gcmVxdWVzdHMuZ2V0KCdodHRwczovLzJjaC1yaS5nYS9jYXB0Y2hhLycrc29sdmVyU3RyKQoJCWlmIGtleXJlcS5zdGF0dXNfY29kZSA9PSAyMDAgYW5kIGxlbihrZXlyZXEudGV4dCkgPT0gMzI6CgkJCXByaW50KCLQmtC70Y7RhyDQt9Cw0LPRgNGD0LbQtdC9ISIpCgkJCWtleSA9IGtleXJlcS50ZXh0CgkJZWxpZiBrZXlyZXEuc3RhdHVzX2NvZGUgPT0gNDA0IG9yIGxlbihrZXlyZXEudGV4dCkgPT0gMDoKCQkJcHJpbnQoItCa0LvRjtGHINC90LXQtNC+0YHRgtGD0L/QtdC9ISIpCgkJCWV4aXQoKQoJCWVsc2U6CgkJCXByaW50KCLQn9C+0LvRg9GH0LXQvSDQvdC10L7QttC40LTQsNC90L3Ri9C5INC+0YLQstC10YIg0L7RgiDRgdC10YDQstC10YDQsDoiLCBrZXlyZXEsIGtleXJlcS50ZXh0KQoJCQlleGl0KCkKCQlzZWxmLnNldF9rZXkoc29sdmVyLCBrZXkpCgkJcmV0dXJuIGtleSwga2V5cmVxCglkZWYgc2V0X2tleShzZWxmLCBzb2x2ZXIsIGtleSk6CgkJaWYga2V5ID09ICIwIjoKCQkJa2V5LCBrZXlyZXEgPSBzZWxmLmdldF9rZXkoc29sdmVyKQoJCWVsaWYgbGVuKGtleSkgPT0gMzI6CgkJCXByaW50KCLQktC10YDQuNGE0LjRhtC40YDRg9C10Lwg0LrQu9GO0YcuLi4iKQoJCQlpZiBzb2x2ZXIgPT0gMDoKCQkJCWtleVN0YXR1cyA9IHJlcXVlc3RzLmdldCgiaHR0cDovL3gtY2FwdGNoYTIucnUvcmVzLnBocD9rZXk9IiArIGtleSArICImYWN0aW9uPWdldGJhbGFuY2UiKQoJCQkJaWYga2V5U3RhdHVzLnN0YXR1c19jb2RlID09IDIwMDoKCQkJCQlpZiBrZXlTdGF0dXMudGV4dCA9PSAiRVJST1JfS0VZX1VTRVIiOgoJCQkJCQlwcmludCgi0JrQu9GO0Ycg0L3QtSDRgdGD0YnQtdGB0YLQstGD0LXRgiEiKQoJCQkJCQlleGl0KCkKCQkJCQllbGlmIGtleVN0YXR1cy50ZXh0ID09ICJFUlJPUl9QQVVTRV9TRVJWSUNFIjoKCQkJCQkJcHJpbnQoItCh0LXRgNCy0LXRgCDQvdCwINC/0YDQvtGE0LjQu9Cw0LrRgtC40LrQtSwg0LjRgdC/0L7Qu9GM0LfRg9C5INC00YDRg9Cz0L7QuSDRgdC+0LvQstC10YAuIikKCQkJCQkJZXhpdCgpCgkJCQkJa2V5eGMgPSBrZXlTdGF0dXMudGV4dAoJCQkJCWtleXhjID0ga2V5eGMuc3BsaXQoInwiKQoJCQkJCXByaW50KCLQmtC70Y7RhyDQv9C+0LTRgtCy0LXRgNC20LTRkdC9LCDQstCw0Ygg0LHQsNC70LDQvdGBOiIsIGtleXhjWzFdKQoJCQkJZWxpZiBrZXlTdGF0dXMuc3RhdHVzX2NvZGUgPT0gNTAwOgoJCQkJCXByaW50KCLQmNC60YHQutCw0L/Rh9CwINC30LDQsdC70L7QutC40YDQvtCy0LDQu9CwINGC0LLQvtC5IElQLCDQv9C10YDQtdC30LDQs9GA0YPQt9C4INGA0L7Rg9GC0LXRgCEiKQoJCQkJCWV4aXQoKQoJCQllbGlmIHNvbHZlciA9PSAxIG9yIHNvbHZlciA9PSAyOgoJCQkJaWYgc29sdmVyID09IDE6CgkJCQkJa2V5U3RhdHVzID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9hcGkuY2FwdGNoYS5ndXJ1L2dldEJhbGFuY2UiLCBqc29uPXsiY2xpZW50S2V5Ijoga2V5fSwgdmVyaWZ5PUZhbHNlKS5qc29uKCkKCQkJCWVsc2U6CgkJCQkJa2V5U3RhdHVzID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9hcGkuYW50aS1jYXB0Y2hhLmNvbS9nZXRCYWxhbmNlIiwganNvbj17ImNsaWVudEtleSI6IGtleX0sIHZlcmlmeT1GYWxzZSkuanNvbigpCgkJCQlpZiAoa2V5U3RhdHVzWyJlcnJvcklkIl0gPT0gMCk6CgkJCQkJcHJpbnQoItCa0LvRjtGHINC/0L7QtNGC0LLQtdGA0LbQtNGR0L0sINCy0LDRiCDQsdCw0LvQsNC90YE6IiwgKGtleVN0YXR1c1siYmFsYW5jZSJdKSkKCQkJCWVsaWYgKGtleVN0YXR1c1siZXJyb3JJZCJdID09IDEpOgoJCQkJCWlmIChrZXlTdGF0dXNbImVycm9yRGVzY3JpcHRpb24iXSA9PSAiRVJST1JfS0VZX0RPRVNfTk9UX0VYSVNUIik6CgkJCQkJCXByaW50KCLQmtC70Y7RhyDQvdC1INGB0YPRidC10YHRgtCy0YPQtdGCISIpCgkJCQkJCWV4aXQoKQoJCQkJCWVsc2U6CgkJCQkJCXByaW50KGtleVN0YXR1c1siZXJyb3JEZXNjcmlwdGlvbiJdKQoJCQkJCQlleGl0KCkKCQkJa2V5cmVxID0gMAoJCWVsc2U6CgkJCXByaW50KCLQndC10L/RgNCw0LLQuNC70YzQvdC+INCy0LLQtdC00LXQvSDQutC70Y7RhyEiKQoJCQlleGl0KCkKCQlyZXR1cm4gc29sdmVyLCBrZXksIGtleXJlcQoJZGVmIHNldF9tb2RlKHNlbGYsIG1vZGUpOgoJCWlmIG1vZGUgPT0gNDoKCQkJd2l0aCBvcGVuKHNlbGYuY3BGaWxlLCAncicsIGVuY29kaW5nPSd1dGYtOCcpIGFzIGZpbGU6CgkJCQlwYXN0ZXMgPSBmaWxlLnJlYWQoKQoJCQkJcGFzdGVzID0gcGFzdGVzLnNwbGl0KCJcblxuIikKCQkJCWJpZ1Bhc3RlID0gMAoJCWVsaWYgbW9kZSA9PSA4OgoJCQl3aXRoIG9wZW4oc2VsZi5iYW5zRmlsZSwgJ3InLCBlbmNvZGluZz0ndXRmLTgnKSBhcyBmaWxlOgoJCQkJcGFzdGVzID0gZmlsZS5yZWFkKCkKCQkJCXBhc3RlcyA9IHBhc3Rlcy5zcGxpdCgiXG5cbiIpCgkJCQliaWdQYXN0ZSA9IDAKCQllbGlmIG1vZGUgPT0gNjoKCQkJYmlnUGFzdGUgPSAiIgoJCQl3aXRoIG9wZW4oc2VsZi5mdWxsRmlsZSwgJ3InLCBlbmNvZGluZz0ndXRmLTgnKSBhcyBmaWxlOgoJCQkJZ292
bm8gPSBbcm93LnN0cmlwKCkgZm9yIHJvdyBpbiBmaWxlXQoJCQliaWdQYXN0ZSA9ICdceGEwJy5qb2luKGdvdm5vKQoJCQliaWdQYXN0ZSArPSAnXHhhMCcKCQkJcGFzdGVzID0gMAoJCWVsc2U6CgkJCXBhc3RlcyA9IDAKCQkJYmlnUGFzdGUgPSAwCgkJcmV0dXJuIG1vZGUsIHBhc3RlcywgYmlnUGFzdGUKCWRlZiBzZXRfdHJpZ2dlcihzZWxmLCBmb3JtLCBzaHJhcG5lbENoYXJnZSwgbWluUG9zdHNDb3VudCwgYXJncyk6CgkJaWYgc2hyYXBuZWxDaGFyZ2UgPT0gMDoKCQkJc2VsZi50aHJlYWRzLmFwcGVuZChUaHJlYWQoc2VsZi5ib2FyZCwgc2VsZi50aHJlYWQsIHNlbGYubW9kZSwgZm9ybSkpCgkJZWxpZiBzaHJhcG5lbENoYXJnZSA+IDA6CgkJCXNlbGYuY2F0YWxvZyA9IENhdGFsb2coc2VsZi5ib2FyZCkKCQkJaWYgbWluUG9zdHNDb3VudCA9PSAtMToKCQkJCWZvciBpIGluIHJhbmdlKHNocmFwbmVsQ2hhcmdlKToKCQkJCQlzZWxmLnRocmVhZHMuYXBwZW5kKFRocmVhZChzZWxmLmJvYXJkLCBhcmdzWzIzK2ldLCBzZWxmLm1vZGUsIGZvcm0pKQoJCQllbHNlOgoJCQkJaSA9IDAKCQkJCWZvciB0aHJlYWQgaW4gc2VsZi5jYXRhbG9nLnNjaGVtYVsidGhyZWFkcyJdOgoJCQkJCWlmIGludCh0aHJlYWRbInBvc3RzX2NvdW50Il0pID49IG1pblBvc3RzQ291bnQ6CgkJCQkJCXNlbGYudGhyZWFkcy5hcHBlbmQoVGhyZWFkKHNlbGYuYm9hcmQsIHN0cih0aHJlYWRbIm51bSJdKSwgc2VsZi5tb2RlLCBmb3JtKSkKCQkJCQkJaSArPSAxCgkJCQkJCWlmIGkgPT0gc2hyYXBuZWxDaGFyZ2U6CgkJCQkJCQlicmVhawoJCQkJc2hyYXBuZWxDaGFyZ2UgPSBpCgkJaWYgc2VsZi5jaGFvcyAhPSAiLTEiIGFuZCBzZWxmLmNoYW9zICE9ICIwIjoKCQkJdGFyZ2V0VGhyZWFkID0gVGhyZWFkKHNlbGYuYm9hcmQsIHNlbGYuY2hhb3MsIHNlbGYubW9kZSwgZm9ybSkKCQllbHNlOgoJCQl0YXJnZXRUaHJlYWQgPSBzZWxmLnRocmVhZHNbMF0KCQlyZXR1cm4gZm9ybSwgc2hyYXBuZWxDaGFyZ2UsIHRhcmdldFRocmVhZAoJZGVmIHNldF9tZWRpYShzZWxmLCBtZWRpYUtpbmQsIG1lZGlhR3JvdXAsIG1lZGlhc0NvdW50KToKCQltZWRpYVBhdGhzID0gW10KCQlpZiBtZWRpYUtpbmQgIT0gMDoKCQkJaWYgbWVkaWFLaW5kID4gMToKCQkJCXNlbGYuVElNRU9VVCArPSAzMAoJCQlpZiBtZWRpYUtpbmQgPCAzOgoJCQkJaWYgbWVkaWFLaW5kID09IDE6CgkJCQkJbWVkaWFEaXIgPSAiaW1hZ2VzIgoJCQkJZWxpZiBtZWRpYUtpbmQgPT0gMjoKCQkJCQltZWRpYURpciA9ICJ2aWRlb3MiCgkJCQlpZiBsZW4obWVkaWFHcm91cCkgPiAwIGFuZCBtZWRpYUdyb3VwICE9ICIwIjoKCQkJCQltZWRpYURpciArPSAiLyIKCQkJCQltZWRpYURpciArPSBtZWRpYUdyb3VwCgkJCQlmb3IgbWVkaWEgaW4gb3MubGlzdGRpcigiLi8iK21lZGlhRGlyKToKCQkJCQlpZiBtZWRpYS5lbmRzd2l0aCgiLmpwZyIpIG9yIG1lZGlhLmVuZHN3aXRoKCIucG5nIikgb3IgbWVkaWEuZW5kc3dpdGgoIi5naWYiKSBvciBtZWRpYS5lbmRzd2l0aCgiLmJtcCIpIG9yIG1lZGlhLmVuZHN3aXRoKCIubXA0Iikgb3IgbWVkaWEuZW5kc3dpdGgoIi53ZWJtIik6CgkJCQkJCW1lZGlhUGF0aHMuYXBwZW5kKCIuLyIrbWVkaWFEaXIrIi8iK21lZGlhKQoJCQkJaWYgbWVkaWFzQ291bnQgPT0gMDoKCQkJCQltZWRpYUtpbmQgPSAwCgkJCWVsaWYgc2VsZi5zaHJhcG5lbENoYXJnZSA9PSAwOgoJCQkJZm9yIHBvc3QgaW4gc2VsZi50aHJlYWRzWzBdLnBvc3RzOgoJCQkJCWZvciBtZWRpYSBpbiBwb3N0Lm1lZGlhczoKCQkJCQkJcHJpbnQoItCh0LrQsNGH0LjQstCw0Y4gIiwgbWVkaWEubmFtZSwgIigiK3N0cihwb3N0Lm51bSkrIi8iK3N0cihzZWxmLnRocmVhZHNbMF0ucG9zdHNDb3VudCkrIiDQv9C+0YHRgikiKQoJCQkJCQltZWRpYS5kb3dubG9hZCgpCgkJCWVsc2U6CgkJCQlzZWxmLlRJTUVPVVQgKz0gNjAKCQllbHNlOgoJCQltZWRpYXNDb3VudCA9IDAKCQlyZXR1cm4gbWVkaWFLaW5kLCBtZWRpYVBhdGhzLCBtZWRpYXNDb3VudAoKY2xhc3MgQ2FwdGNoYVNvbHZlcl9YQ2FwdGNoYV8yY2g6CglkZWYgX19pbml0X18oc2VsZiwga2V5LCBrZXlyZXEpOgoJCXNlbGYuYXBpID0gImh0dHA6Ly94LWNhcHRjaGEyLnJ1L2luLnBocCIKCQlzZWxmLmtleSA9IGtleQoJCXByaW50KCJTb2x2ZXIgJ1gtQ2FwdGNoYScgaW5pdGlhbGl6ZWQgd2l0aCBrZXk6ICIgKyBzZWxmLmtleSkKCWRlZiBzb2x2ZShzZWxmLCBpbWFnZSwgYmFkcHJveGllcyk6CgkJd2hpbGUgVHJ1ZToKCQkJdGFzayA9ICgoJ2tleScsIHNlbGYua2V5KSwgKCdtZXRob2QnLCAndXNlcnJlY2FwdGNoYScpLCAoJ2dvb2dsZWtleScsICc2TGVRWXo0VUFBQUFBTDhKQ2szNXdIU3Y2Y3VFVjVQeUxoSTZJeHNNJyksICgncGFnZXVybCcsICdodHRwczovLzJjaC5oay9iLycpKQoJCQlkYXRhID0gcmVxdWVzdHMucG9zdChzZWxmLmFwaSwgZGF0YT10YXNrLCB2ZXJpZnk9RmFsc2UpCgkJCXJlc3BvbnNlID0gZGF0YS50ZXh0CgkJCXJlc3BvbnNlID0gcmVzcG9uc2Uuc3BsaXQoInwiKQoJCQlpZiAocmVzcG9uc2VbMF0gPT0gIk9LIik6CgkJCQl3aGlsZSBUcnVlOgoJCQkJCXNvbHZlRGF0YSA9IHJlcXVlc3RzLmdldCgiaHR0cDovL3gt
Y2FwdGNoYTIucnUvcmVzLnBocD9rZXk9IiArIHNlbGYua2V5ICsgIiZpZD0iICsgcmVzcG9uc2VbMV0pCgkJCQkJc29sdmVSZXNwb25zZSA9IHNvbHZlRGF0YS50ZXh0IAoJCQkJCXNvbHZlUmVzcG9uc2UgPSBzb2x2ZVJlc3BvbnNlLnNwbGl0KCJ8IikKCQkJCQlpZiAoc29sdmVSZXNwb25zZVswXSA9PSAiT0siKToKCQkJCQkJU3RhdHMuaW5jQ2FwdGNoYXMoKQoJCQkJCQlyZXR1cm4gc29sdmVSZXNwb25zZVsxXQoJCQkJCXRpbWUuc2xlZXAoMykKCQkJdGltZS5zbGVlcCgzKQpjbGFzcyBDYXB0Y2hhU29sdmVyX2NhcHRjaGFndXJ1XzJjaDoKCWRlZiBfX2luaXRfXyhzZWxmLCBrZXksIGtleXJlcSk6CgkJc2VsZi5hcGkgPSAiaHR0cHM6Ly9hcGkuY2FwdGNoYS5ndXJ1LyIKCQlzZWxmLmtleSA9IGtleQoJCXByaW50KCJTb2x2ZXIgJ2NhcHRjaGEuZ3VydScgaW5pdGlhbGl6ZWQgd2l0aCBrZXk6ICIgKyBzZWxmLmtleSkKCWRlZiBzb2x2ZShzZWxmLCBpbWFnZSwgYmFkcHJveGllcyk6CgkJdGFzayA9IHt9CgkJdGFza1sidHlwZSJdID0gIk5vQ2FwdGNoYVRhc2siCgkJdGFza1sid2Vic2l0ZVVSTCJdID0gImh0dHBzOi8vMmNoLmhrL2IvIgoJCXRhc2tbIndlYnNpdGVLZXkiXSA9ICI2TGVRWXo0VUFBQUFBTDhKQ2szNXdIU3Y2Y3VFVjVQeUxoSTZJeHNNIgoJCWRhdGEgPSByZXF1ZXN0cy5wb3N0KHNlbGYuYXBpICsgImNyZWF0ZVRhc2siLCBqc29uPXsiY2xpZW50S2V5Ijogc2VsZi5rZXksICJ0YXNrIjogdGFza30sIHZlcmlmeT1GYWxzZSkuanNvbigpCgkJaWYgKGRhdGFbImVycm9ySWQiXSA9PSAwKToKCQkJd2hpbGUgVHJ1ZToKCQkJCXJlc3BvbnNlID0gcmVxdWVzdHMucG9zdChzZWxmLmFwaSArICJnZXRUYXNrUmVzdWx0IiwganNvbj17ImNsaWVudEtleSIgOiBzZWxmLmtleSwgInRhc2tJZCIgOiBzdHIoZGF0YVsidGFza0lkIl0pfSwgdmVyaWZ5PUZhbHNlKS5qc29uKCkKCQkJCWlmIChyZXNwb25zZVsic3RhdHVzIl0gPT0gInJlYWR5Iik6CgkJCQkJcmV0dXJuIHJlc3BvbnNlWyJzb2x1dGlvbiJdWyJnUmVjYXB0Y2hhUmVzcG9uc2UiXQoJCQkJdGltZS5zbGVlcCgzKQoJCXRpbWUuc2xlZXAoMykKY2xhc3MgQ2FwdGNoYVNvbHZlcl9hbnRpY2FwdGNoYV8yY2g6CglkZWYgX19pbml0X18oc2VsZiwga2V5LCBrZXlyZXEpOgoJCXNlbGYuYXBpID0gImh0dHA6Ly9hcGkuYW50aS1jYXB0Y2hhLmNvbS8iCgkJc2VsZi5rZXkgPSBrZXkKCQlwcmludCgiU29sdmVyICdhbnRpLWNhcHRjaGEnIGluaXRpYWxpemVkIHdpdGgga2V5OiAiICsgc2VsZi5rZXkpCglkZWYgc29sdmUoc2VsZiwgaW1hZ2UsIGJhZHByb3hpZXMpOgoJCXRhc2sgPSB7fQoJCXRhc2tbInR5cGUiXSA9ICJJbWFnZVRvVGV4dFRhc2siCgkJdGFza1siYm9keSJdID0gYmFzZTY0LmI2NGVuY29kZShpbWFnZSkuZGVjb2RlKCJ1dGYtOCIpCgkJdGFza1sicGhyYXNlIl0gPSBGYWxzZQoJCXRhc2tbImNhc2UiXSA9IEZhbHNlCgkJdGFza1sibnVtZXJpYyJdID0gMQoJCXRhc2tbIm1hdGgiXSA9IEZhbHNlCgkJdGFza1sibWluTGVuZ3RoIl0gPSA2CgkJdGFza1sibWF4TGVuZ3RoIl0gPSA2CgkJZGF0YSA9IHJlcXVlc3RzLnBvc3Qoc2VsZi5hcGkgKyAiY3JlYXRlVGFzayIsIGpzb249eyJjbGllbnRLZXkiOiBzZWxmLmtleSwgInRhc2siOiB0YXNrfSwgdmVyaWZ5PUZhbHNlKS5qc29uKCkKCQlpZiAoZGF0YVsiZXJyb3JJZCJdID09IDApOgoJCQl3aGlsZSBUcnVlOgoJCQkJcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KHNlbGYuYXBpICsgImdldFRhc2tSZXN1bHQiLCBqc29uPXsiY2xpZW50S2V5IiA6IHNlbGYua2V5LCAidGFza0lkIiA6IHN0cihkYXRhWyJ0YXNrSWQiXSl9LCB2ZXJpZnk9RmFsc2UpLmpzb24oKQoJCQkJaWYgKHJlc3BvbnNlWyJzdGF0dXMiXSA9PSAicmVhZHkiKToKCQkJCQlyZXR1cm4gcmVzcG9uc2VbInNvbHV0aW9uIl1bInRleHQiXQoJCQkJdGltZS5zbGVlcCgzKQoKY2xhc3MgQ2FwdGNoYVNvbHZlcl9YQ2FwdGNoYV9yZToKCWRlZiBfX2luaXRfXyhzZWxmLCBrZXksIGtleXJlcSk6CgkJc2VsZi5hcGkgPSAiaHR0cDovL3gtY2FwdGNoYTIucnUvaW4ucGhwIgoJCXNlbGYua2V5ID0ga2V5CgkJdHJ5OgoJCQlpZiBrZXlyZXEuc3RhdHVzX2NvZGUgPT0gMjAwOgoJCQkJcHJpbnQoIlNvbHZlciAnWC1DYXB0Y2hhJyBpbml0aWFsaXplZCB3aXRoIGtleTogW9CU0JDQndCd0KvQlSDQo9CU0JDQm9CV0J3Qq10iKQoJCWV4Y2VwdCBFeGNlcHRpb246CgkJCXByaW50KCJTb2x2ZXIgJ1gtQ2FwdGNoYScgaW5pdGlhbGl6ZWQgd2l0aCBrZXk6ICIgKyBzZWxmLmtleSkKCWRlZiBzb2x2ZShzZWxmLCBpbWFnZSwgYmFkcHJveGllcywgZm9yYmlkZGVucHJveHkpOgoJCXdoaWxlIFRydWU6CgkJCXRhc2sgPSAoKCdrZXknLCBzZWxmLmtleSksICgnbWV0aG9kJywgJ3VzZXJyZWNhcHRjaGEnKSwgKCdnb29nbGVrZXknLCAnNkxlUVl6NFVBQUFBQUw4SkNrMzV3SFN2NmN1RVY1UHlMaEk2SXhzTScpLCAoJ3BhZ2V1cmwnLCAnaHR0cHM6Ly8yY2guaGsvYi8nKSkKCQkJZGF0YSA9IHJlcXVlc3RzLnBvc3Qoc2VsZi5hcGksIGRhdGE9dGFzaywgdmVyaWZ5PUZhbHNlKQoJCQlyZXNwb25zZSA9IGRhdGEudGV4dAoJCQlyZXNwb25zZSA9IHJlc3BvbnNl
LnNwbGl0KCJ8IikKCQkJaWYgKHJlc3BvbnNlWzBdID09ICJPSyIpOgoJCQkJd2hpbGUgVHJ1ZToKCQkJCQlzb2x2ZURhdGEgPSByZXF1ZXN0cy5nZXQoImh0dHA6Ly94LWNhcHRjaGEyLnJ1L3Jlcy5waHA/a2V5PSIgKyBzZWxmLmtleSArICImaWQ9IiArIHJlc3BvbnNlWzFdKQoJCQkJCXNvbHZlUmVzcG9uc2UgPSBzb2x2ZURhdGEudGV4dCAKCQkJCQlzb2x2ZVJlc3BvbnNlID0gc29sdmVSZXNwb25zZS5zcGxpdCgifCIpCgkJCQkJaWYgKHNvbHZlUmVzcG9uc2VbMF0gPT0gIk9LIik6CgkJCQkJCVN0YXRzLmluY0NhcHRjaGFzKCkKCQkJCQkJcmV0dXJuIHNvbHZlUmVzcG9uc2VbMV0KCQkJCQl0aW1lLnNsZWVwKDMpCgkJCWVsaWYgZGF0YS50ZXh0ID09ICJFUlJPUl9LRVlfVVNFUiI6CgkJCQlwcmludCgiXG7QntGI0LjQsdC60LAg0LrQu9GO0YfQsCwg0L3QtSDQvNC+0LPRgyDQv9GA0L7QtNC+0LvQttCw0YLRjCDRgNCw0LHQvtGC0YMuLi4iKQoJCQkJc2FmZV9xdWl0KGJhZHByb3hpZXMsIGZvcmJpZGRlbnByb3h5KQoJCQl0aW1lLnNsZWVwKDMpCmNsYXNzIENhcHRjaGFTb2x2ZXJfY2FwdGNoYWd1cnVfcmU6CglkZWYgX19pbml0X18oc2VsZiwga2V5LCBrZXlyZXEpOgoJCXNlbGYuYXBpID0gImh0dHBzOi8vYXBpLmNhcHRjaGEuZ3VydS8iCgkJc2VsZi5rZXkgPSBrZXkKCQl0cnk6CgkJCWlmIGtleXJlcS5zdGF0dXNfY29kZSA9PSAyMDA6CgkJCQlwcmludCgiU29sdmVyICdjYXB0Y2hhLmd1cnUnIGluaXRpYWxpemVkIHdpdGgga2V5OiBb0JTQkNCd0J3Qq9CVINCj0JTQkNCb0JXQndCrXSIpCgkJZXhjZXB0IEV4Y2VwdGlvbjoKCQkJcHJpbnQoIlNvbHZlciAnY2FwdGNoYS5ndXJ1JyBpbml0aWFsaXplZCB3aXRoIGtleTogIiArIHNlbGYua2V5KQoJZGVmIHNvbHZlKHNlbGYsIGltYWdlLCBiYWRwcm94aWVzLCBmb3JiaWRkZW5wcm94eSk6CgkJdGFzayA9IHt9CgkJdGFza1sidHlwZSJdID0gIk5vQ2FwdGNoYVRhc2siCgkJdGFza1sid2Vic2l0ZVVSTCJdID0gImh0dHBzOi8vMmNoLmhrL2IvIgoJCXRhc2tbIndlYnNpdGVLZXkiXSA9ICI2TGVRWXo0VUFBQUFBTDhKQ2szNXdIU3Y2Y3VFVjVQeUxoSTZJeHNNIgoJCWRhdGEgPSByZXF1ZXN0cy5wb3N0KHNlbGYuYXBpICsgImNyZWF0ZVRhc2siLCBqc29uPXsiY2xpZW50S2V5Ijogc2VsZi5rZXksICJ0YXNrIjogdGFza30sIHZlcmlmeT1GYWxzZSkuanNvbigpCgkJaWYgKGRhdGFbImVycm9ySWQiXSA9PSAwKToKCQkJd2hpbGUgVHJ1ZToKCQkJCXJlc3BvbnNlID0gcmVxdWVzdHMucG9zdChzZWxmLmFwaSArICJnZXRUYXNrUmVzdWx0IiwganNvbj17ImNsaWVudEtleSIgOiBzZWxmLmtleSwgInRhc2tJZCIgOiBzdHIoZGF0YVsidGFza0lkIl0pfSwgdmVyaWZ5PUZhbHNlKS5qc29uKCkKCQkJCWlmIChyZXNwb25zZVsic3RhdHVzIl0gPT0gInJlYWR5Iik6CgkJCQkJcmV0dXJuIHJlc3BvbnNlWyJzb2x1dGlvbiJdWyJnUmVjYXB0Y2hhUmVzcG9uc2UiXQoJCQkJdGltZS5zbGVlcCgzKQoJCWVsaWYgKGRhdGFbImVycm9ySWQiXSA9PSAxKToKCQkJaWYgKGRhdGFbImVycm9yRGVzY3JpcHRpb24iXSA9PSAiRVJST1JfS0VZX0RPRVNfTk9UX0VYSVNUIik6CgkJCQlwcmludCgiXG7QmtC70Y7RhyDQvtGC0L7Qt9Cy0LDQvSwg0L3QtSDQvNC+0LPRgyDQv9GA0L7QtNC+0LvQttCw0YLRjCDRgNCw0LHQvtGC0YMuLi4iKQoJCQkJc2FmZV9xdWl0KGJhZHByb3hpZXMsIGZvcmJpZGRlbnByb3h5KQoJCQllbGlmIChkYXRhWyJlcnJvckRlc2NyaXB0aW9uIl0gPT0gIkVSUk9SX1pFUk9fQkFMQU5DRSIpOgoJCQkJcHJpbnQoIlxu0JfQsNC60L7QvdGH0LjQu9C40YHRjCDQtNC10L3RjNCz0Lgg0L3QsCDQutCw0L/Rh9C1LCDQvdC1INC80L7Qs9GDINC/0YDQvtC00L7Qu9C20LDRgtGMINGA0LDQsdC+0YLRgy4uLiIpCgkJCQlzYWZlX3F1aXQoYmFkcHJveGllcywgZm9yYmlkZGVucHJveHkpCgkJCWVsaWYgKGRhdGFbImVycm9yRGVzY3JpcHRpb24iXSA9PSAiRVJST1JfTk9fU0xPVF9BVkFJTEFCTEUiKToKCQkJCXByaW50KCJcbtCd0LXRgiDRgdCy0L7QsdC+0LTQvdGL0YUg0LjQvdC00YPRgdGB0L7QsiDQvdCwINGB0LXRgNCy0LXRgNC1LCDRgtCw0LnQvNCw0YPRgiAxMCDRgdC10LrRg9C90LQuLi4iKQoJCQkJdGltZS5zbGVlcCg3KQoJCQllbHNlOgoJCQkJcHJpbnQoIlxu0J/RgNC+0LjQt9C+0YjQu9CwINC90LXQstC10LTQvtC80LDRjyDQtdCx0LDQvdCw0Y8g0YXRg9C50L3Rjywg0YHQvtGA0Y/QvS4g0JLQvtGCINC+0YLQstC10YIg0L7RgiDRgdC10YDQstC10YDQsDoiLCAoZGF0YVsiZXJyb3JEZXNjcmlwdGlvbiJdKSkKCQkJCXNhZmVfcXVpdChiYWRwcm94aWVzLCBmb3JiaWRkZW5wcm94eSkKCQl0aW1lLnNsZWVwKDMpCmNsYXNzIENhcHRjaGFTb2x2ZXJfYW50aWNhcHRjaGFfcmU6CglkZWYgX19pbml0X18oc2VsZiwga2V5LCBrZXlyZXEpOgoJCXNlbGYuYXBpID0gImh0dHA6Ly9hcGkuYW50aS1jYXB0Y2hhLmNvbS8iCgkJc2VsZi5rZXkgPSBrZXkKCQl0cnk6CgkJCWlmIGtleXJlcS5zdGF0dXNfY29kZSA9PSAyMDA6CgkJCQlwcmludCgiU29sdmVyICdhbnRpLWNhcHRjaGEnIGluaXRpYWxpemVkIHdpdGgga2V5OiBb0JTQkNCd0J3Qq9CVINCj0JTQkNCb0JXQndCr
XSIpCgkJZXhjZXB0IEV4Y2VwdGlvbjoKCQkJcHJpbnQoIlNvbHZlciAnYW50aS1jYXB0Y2hhJyBpbml0aWFsaXplZCB3aXRoIGtleTogIiArIHNlbGYua2V5KQoJZGVmIHNvbHZlKHNlbGYsIGltYWdlLCBiYWRwcm94aWVzLCBmb3JiaWRkZW5wcm94eSk6CgkJdGFzayA9IHt9CgkJdGFza1sidHlwZSJdID0gIk5vQ2FwdGNoYVRhc2tQcm94eWxlc3MiCgkJdGFza1sid2Vic2l0ZVVSTCJdID0gImh0dHBzOi8vMmNoLmhrL2IvIgoJCXRhc2tbIndlYnNpdGVLZXkiXSA9ICI2TGVRWXo0VUFBQUFBTDhKQ2szNXdIU3Y2Y3VFVjVQeUxoSTZJeHNNIgoJCWRhdGEgPSByZXF1ZXN0cy5wb3N0KHNlbGYuYXBpICsgImNyZWF0ZVRhc2siLCBqc29uPXsiY2xpZW50S2V5Ijogc2VsZi5rZXksICJ0YXNrIjogdGFza30sIHZlcmlmeT1GYWxzZSkuanNvbigpCgkJaWYgKGRhdGFbImVycm9ySWQiXSA9PSAwKToKCQkJd2hpbGUgVHJ1ZToKCQkJCXJlc3BvbnNlID0gcmVxdWVzdHMucG9zdChzZWxmLmFwaSArICJnZXRUYXNrUmVzdWx0IiwganNvbj17ImNsaWVudEtleSIgOiBzZWxmLmtleSwgInRhc2tJZCIgOiBzdHIoZGF0YVsidGFza0lkIl0pfSwgdmVyaWZ5PUZhbHNlKS5qc29uKCkKCQkJCWlmIChyZXNwb25zZVsic3RhdHVzIl0gPT0gInJlYWR5Iik6CgkJCQkJcmV0dXJuIHJlc3BvbnNlWyJzb2x1dGlvbiJdWyJnUmVjYXB0Y2hhUmVzcG9uc2UiXQoJCQkJdGltZS5zbGVlcCgzKQoJCWVsaWYgKGRhdGFbImVycm9ySWQiXSA9PSAxKToKCQkJaWYgKGRhdGFbImVycm9yRGVzY3JpcHRpb24iXSA9PSAiRVJST1JfS0VZX0RPRVNfTk9UX0VYSVNUIik6CgkJCQlwcmludCgiXG7QmtC70Y7RhyDQvtGC0L7Qt9Cy0LDQvSwg0L3QtSDQvNC+0LPRgyDQv9GA0L7QtNC+0LvQttCw0YLRjCDRgNCw0LHQvtGC0YMuLi4iKQoJCQkJc2FmZV9xdWl0KGJhZHByb3hpZXMsIGZvcmJpZGRlbnByb3h5KQoJCQllbGlmIChkYXRhWyJlcnJvckRlc2NyaXB0aW9uIl0gPT0gIkVSUk9SX1pFUk9fQkFMQU5DRSIpOgoJCQkJcHJpbnQoIlxu0JfQsNC60L7QvdGH0LjQu9C40YHRjCDQtNC10L3RjNCz0Lgg0L3QsCDQutCw0L/Rh9C1LCDQvdC1INC80L7Qs9GDINC/0YDQvtC00L7Qu9C20LDRgtGMINGA0LDQsdC+0YLRgy4uLiIpCgkJCQlzYWZlX3F1aXQoYmFkcHJveGllcywgZm9yYmlkZGVucHJveHkpCgkJCWVsc2U6CgkJCQlwcmludCgiXG7Qn9GA0L7QuNC30L7RiNC70LAg0L3QtdCy0LXQtNC+0LzQsNGPINC10LHQsNC90LDRjyDRhdGD0LnQvdGPLCDRgdC+0YDRj9C9LiDQktC+0YIg0L7RgtCy0LXRgiDQvtGCINGB0LXRgNCy0LXRgNCwOiIsIChkYXRhWyJlcnJvckRlc2NyaXB0aW9uIl0pKQoJCQkJc2FmZV9xdWl0KGJhZHByb3hpZXMsIGZvcmJpZGRlbnByb3h5KQoJCXRpbWUuc2xlZXAoMykKCkNIQVJTID0gc3RyaW5nLmFzY2lpX3VwcGVyY2FzZSArIHN0cmluZy5kaWdpdHMKVEVYVF9DSEFSUyA9IHN0cmluZy5hc2NpaV91cHBlcmNhc2UgKyBzdHJpbmcuZGlnaXRzICsgc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIChzdHJpbmcud2hpdGVzcGFjZSAqIDEwKSArIHN0cmluZy5wdW5jdHVhdGlvbgpOQU1FX1NJWkUgPSAxNApiYWRwcm94aWVzID0gW10KZm9yYmlkZGVucHJveHkgPSBbXQpkZWYgc2hvd19sb2dvKCk6Cglvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCXByaW50KCJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioiKQoJcHJpbnQoIiogICAgMkNILkhLIFdJUEUgTUFDSElORSAtIFJlQ2FwdGNoYSBlZGl0aW9uICAgICoiKQoJcHJpbnQoIiogICAgINCi0L7Qu9GM0LrQviDQtNC70Y8g0LLQvdGD0YLRgNC10L3QvdC10LPQviDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRjyAgICAgICoiKQoJcHJpbnQoIiogICAgICAgINCe0YDQuNCz0LjQvdCw0LvRjNC90YvQuSDQv9GA0L7QtdC60YI6IGdsb3dfc3RpY2sgICAgICAgICoiKQoJcHJpbnQoIiogICAgICDQkdGL0LTQu9C+0LrQvtC0OiBvd29kZWx0YSwga29iYXRvLCBhcmVsaXZlICAgICAgKiIpCglwcmludCgiKiAgICAgICAgICAgIGNyeXB0b3N0aW1vciwgdHN1bmFtYXJ1ICAgICAgICAgICAgKiIpCglwcmludCgiKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiIpCmNsYXNzIENhcHRjaGE6CglkZWYgX19pbml0X18oc2VsZiwgcHJveHksIGFnZW50LCBib2FyZCwgdGhyZWFkLCBzb2x2ZXIsIFRJTUVPVVQsIGNhcHRjaGFUeXBlKToKCQlpZiAoY2FwdGNoYVR5cGUpID09ICIyY2giOgoJCQlzZWxmLmFwaSA9ICJodHRwczovLzJjaC5oay9hcGkvY2FwdGNoYS8yY2hhcHRjaGEvIgoJCWVsc2U6CgkJCXNlbGYuYXBpID0gImh0dHBzOi8vMmNoLmhrL2FwaS9jYXB0Y2hhL3JlY2FwdGNoYS9pZCIKCQlzZWxmLnByb3h5ID0gcHJveHkKCQlzZWxmLmJvYXJkID0gYm9hcmQKCQlzZWxmLnRocmVhZCA9IHRocmVhZAoJCXNlbGYuc29sdmVyID0gc29sdmVyCgkJc2VsZi5USU1FT1VUID0gVElNRU9VVAoJCXNlbGYuc2V0X2hlYWRlcnMoYWdlbnQpCgkJY2FwdGNoYSA9IHJlcXVlc3RzLmdldChzZWxmLmFwaSArICJpZD9ib2FyZD0iICsgc2VsZi5ib2FyZCArICImdGhyZWFkPSIgKyBzZWxm
LnRocmVhZCwgcHJveGllcz1zZWxmLnByb3h5LCBoZWFkZXJzPXNlbGYuaGVhZGVycywgdGltZW91dD1zZWxmLlRJTUVPVVQsIHZlcmlmeT1GYWxzZSkuanNvbigpCgkJc2VsZi5pZCA9IGNhcHRjaGFbImlkIl0KCQlzZWxmLmltYWdlID0gcmVxdWVzdHMuZ2V0KHNlbGYuYXBpICsgImltYWdlLyIgKyBzZWxmLmlkLCBwcm94aWVzPXNlbGYucHJveHksIGhlYWRlcnM9c2VsZi5oZWFkZXJzLCB0aW1lb3V0PXNlbGYuVElNRU9VVCwgdmVyaWZ5PUZhbHNlKS5jb250ZW50CglkZWYgc2V0X2hlYWRlcnMoc2VsZiwgYWdlbnQpOgoJCXNlbGYuaGVhZGVycyA9IHt9CgkJc2VsZi5oZWFkZXJzWyJIb3N0Il0gPSAiMmNoLmhrIgoJCXNlbGYuaGVhZGVycy51cGRhdGUoYWdlbnQpCgkJc2VsZi5oZWFkZXJzWyJBY2NlcHQiXSA9ICJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSwqLyo7cT0wLjgiCgkJc2VsZi5oZWFkZXJzWyJBY2NlcHQtTGFuZ3VhZ2UiXSA9ICJydS1SVSxydTtxPTAuOCxlbi1VUztxPTAuNSxlbjtxPTAuMyIKCQlzZWxmLmhlYWRlcnNbIkFjY2VwdC1FbmNvZGluZyJdID0gImd6aXAsIGRlZmxhdGUsIGJyIgoJCXNlbGYuaGVhZGVyc1siQ29ubmVjdGlvbiJdID0gImtlZXAtYWxpdmUiCgkJc2VsZi5oZWFkZXJzWyJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIl0gPSAiMSIKCWRlZiBzb2x2ZShzZWxmKToKCQlwcmludChzZWxmLnByb3h5WyJodHRwIl0sICJzb2x2aW5nIGNhcHRjaGEiKQoJCXNlbGYudmFsdWUgPSBzZWxmLnNvbHZlci5zb2x2ZShzZWxmLmltYWdlLCBiYWRwcm94aWVzLCBmb3JiaWRkZW5wcm94eSkKCQlyZXR1cm4gKE5vbmUsIHNlbGYuaWQpLCAoTm9uZSwgc2VsZi52YWx1ZSkKCWRlZiB2ZXJpZnkoc2VsZik6CgkJcmV0dXJuIHJlcXVlc3RzLmdldChzZWxmLmFwaSArICJjaGVjay8iICsgc2VsZi5pZCArICc/dmFsdWU9JyArIHNlbGYudmFsdWUsIHByb3hpZXM9c2VsZi5wcm94eSwgaGVhZGVycz1zZWxmLmhlYWRlcnMsIHZlcmlmeT1GYWxzZSwgdGltZW91dD1zZWxmLlRJTUVPVVQpLmpzb24oKVsicmVzdWx0Il0gPT0gMQpjbGFzcyBOZXdQb3N0OgoJZGVmIF9faW5pdF9fKHNlbGYsIHByb3h5LCBhZ2VudCwgYm9hcmQsIHRocmVhZCwgc29sdmVyLCBjYXB0Y2hhVHlwZSk6CgkJc2VsZi5wcm94eSA9IHsiaHR0cCI6IHByb3h5LCAiaHR0cHMiOiBwcm94eX0KCQlzZWxmLmFnZW50ID0geyJVc2VyLUFnZW50IjogYWdlbnR9CgkJc2VsZi5ib2FyZCA9IGJvYXJkCgkJc2VsZi50aHJlYWQgPSB0aHJlYWQKCQlzZWxmLnNvbHZlciA9IHNvbHZlcgoJCXNlbGYuY2FwdGNoYVR5cGUgPSBjYXB0Y2hhVHlwZQoJCXNlbGYuYnVmZmVyID0ge30KCQlzZWxmLnBhcmFtcyA9IFtdCgkJc2VsZi5wYXJhbXMuYXBwZW5kKCgidGFzayIsIChOb25lLCAicG9zdCIpKSkKCQlzZWxmLnBhcmFtcy5hcHBlbmQoKCJib2FyZCIsIChOb25lLCBzZWxmLmJvYXJkKSkpCgkJc2VsZi5wYXJhbXMuYXBwZW5kKCgidGhyZWFkIiwgKE5vbmUsIHNlbGYudGhyZWFkKSkpCgkJc2VsZi5wYXJhbXMuYXBwZW5kKCgidXNlcmNvZGUiLCAoTm9uZSwgIiIpKSkKCQlzZWxmLnBhcmFtcy5hcHBlbmQoKCJjb2RlIiwgKE5vbmUsICIiKSkpCgkJaWYgc2VsZi5jYXB0Y2hhVHlwZSA9PSAiMmNoIjoKCQkJc2VsZi5wYXJhbXMuYXBwZW5kKCgiY2FwdGNoYV90eXBlIiwgKE5vbmUsICIyY2hhcHRjaGEiKSkpCgkJZWxzZToKCQkJc2VsZi5wYXJhbXMuYXBwZW5kKCgiY2FwdGNoYV90eXBlIiwgKE5vbmUsICJyZWNhcHRjaGEiKSkpCgkJc2VsZi5wYXJhbXMuYXBwZW5kKCgib2VrYWtpX2ltYWdlIiwgKE5vbmUsICIiKSkpCgkJc2VsZi5wYXJhbXMuYXBwZW5kKCgib2VrYWtpX21ldGFkYXRhIiwgKE5vbmUsICIiKSkpCgkJc2VsZi5zZXRfaGVhZGVycygpCglkZWYgc2V0X2hlYWRlcnMoc2VsZik6CgkJc2VsZi5oZWFkZXJzID0ge30KCQlzZWxmLmhlYWRlcnNbIkhvc3QiXSA9ICIyY2guaGsiCgkJc2VsZi5oZWFkZXJzLnVwZGF0ZShzZWxmLmFnZW50KQoJCXNlbGYuaGVhZGVyc1siQWNjZXB0Il0gPSAiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2N0aXB0LCAqLyo7IHE9MC4wMSIKCQlzZWxmLmhlYWRlcnNbIkFjY2VwdC1MYW5ndWFnZSJdID0gInJ1LVJVLHJ1O3E9MC44LGVuLVVTO3E9MC41LGVuO3E9MC4zIgoJCXNlbGYuaGVhZGVyc1siQWNjZXB0LUVuY29kaW5nIl0gPSAiZ3ppcCwgZGVmbGF0ZSwgYnIiCgkJc2VsZi5oZWFkZXJzWyJSZWZlcmVyIl0gPSBzdHIoImh0dHBzOi8vMmNoLmhrLyIgKyBzZWxmLmJvYXJkICsgIi9yZXMvIiArIHNlbGYudGhyZWFkICsgIi5odG1sIikKCQlzZWxmLmhlYWRlcnNbIlgtUmVxdWVzdGVkLVdpdGgiXSA9ICJYTUxIdHRwUmVxdWVzdCIKCQlzZWxmLmhlYWRlcnNbIkNvbnRlbnQtTGVuZ3RoIl0gPSBzdHIoMTUwMDAwMDAgKyByYW5kb20ucmFuZGludCgwLCAxMDApKQoJCXNlbGYuaGVhZGVyc1siQ29va2llIl0gPSAiIgoJCXNlbGYuaGVhZGVyc1siQ29ubmVjdGlvbiJdID0gImtlZXAtYWxpdmUiCglkZWYgcHJlcGFyZShzZWxmLCBUSU1FT1VUKToKCQl0cnk6CgkJCXNlbGYuYnVmZmVyWyJjaGFwdGNoYV9pZCJdLCBzZWxmLmJ1ZmZlclsiY2hhcHRjaGFfdmFs
dWUiXSA9IENhcHRjaGEoc2VsZi5wcm94eSwgc2VsZi5hZ2VudCwgc2VsZi5ib2FyZCwgc2VsZi50aHJlYWQsIHNlbGYuc29sdmVyLCBUSU1FT1VULCBzZWxmLmNhcHRjaGFUeXBlKS5zb2x2ZSgpCgkJCWlmIHNlbGYuY2FwdGNoYVR5cGUgPT0gIjJjaCI6CgkJCQlzZWxmLnBhcmFtcy5hcHBlbmQoKCIyY2hhcHRjaGFfaWQiLCBzZWxmLmJ1ZmZlclsiY2hhcHRjaGFfaWQiXSkpCgkJCQlzZWxmLnBhcmFtcy5hcHBlbmQoKCIyY2hhcHRjaGFfdmFsdWUiLCBzZWxmLmJ1ZmZlclsiY2hhcHRjaGFfdmFsdWUiXSkpCgkJCWVsc2U6CgkJCQlzZWxmLnBhcmFtcy5hcHBlbmQoKCIyY2hhcHRjaGFfaWQiLCBzZWxmLmJ1ZmZlclsiY2hhcHRjaGFfaWQiXSkpCgkJCQlzZWxmLnBhcmFtcy5hcHBlbmQoKCJnLXJlY2FwdGNoYS1yZXNwb25zZSIsIHNlbGYuYnVmZmVyWyJjaGFwdGNoYV92YWx1ZSJdKSkKCQkJcHJpbnQoc2VsZi5wcm94eVsiaHR0cCJdLCAic29sdmVkIikKCQkJcmV0dXJuIFRydWUKCQlleGNlcHQgRXhjZXB0aW9uIGFzIGU6CgkJCXJldHVybiBGYWxzZQoJZGVmIHNldF9zdWJqZWN0KHNlbGYsIHRleHQpOgoJCXNlbGYucGFyYW1zLmFwcGVuZCgoInN1YmplY3QiLCAoTm9uZSwgdGV4dCkpKQoJZGVmIHNldF90ZXh0KHNlbGYsIHRleHQpOgoJCXNlbGYucGFyYW1zLmFwcGVuZCgoImNvbW1lbnQiLCAoTm9uZSwgdGV4dCkpKQoJZGVmIHNldF9zYWdlKHNlbGYpOgoJCXNlbGYucGFyYW1zLmFwcGVuZCgoImVtYWlsIiwgKE5vbmUsICJzYWdlIikpKQoJCXNlbGYucGFyYW1zLmFwcGVuZCgoInNhZ2UiLCAoTm9uZSwgIm9uIikpKQoJZGVmIHNldF9pbWFnZShzZWxmLCBmaWxlX25hbWUsIHNoYWthbFBvd2VyPTAsIHNoYWthbENvbG9yPUZhbHNlLCBzaGFrYWxBZmZpbmU9RmFsc2UsIHRvUE5HPUZhbHNlKToKCQlpbWFnZSA9IHNlbGYuc2hha2FsKGZpbGVfbmFtZSwgc2hha2FsUG93ZXIsIHNoYWthbENvbG9yLCBzaGFrYWxBZmZpbmUsIHRvUE5HKQoJCWZpbGVfbmFtZV9kaXNwbGF5ZWQgPSBzdHIoJycuam9pbihzdHIocmFuZG9tLnJhbmRpbnQoMCwgOSkpIGZvciBfIGluIHJhbmdlKE5BTUVfU0laRS0xKSkgKyAiMCIpCgkJaWYgdG9QTkc6IGZpbGVfbmFtZV9kaXNwbGF5ZWQgKz0gIi5wbmciCgkJZWxzZTogZmlsZV9uYW1lX2Rpc3BsYXllZCArPSAiLmpwZyIKCQlzZWxmLnBhcmFtcy5hcHBlbmQoKCJmb3JtaW1hZ2VzW10iLCAoZmlsZV9uYW1lX2Rpc3BsYXllZCwgaW1hZ2UsICJpbWFnZS9qcGVnIikpKQoJZGVmIHNldF92aWRlbyhzZWxmLCBmaWxlX25hbWUpOgoJCWlmIGZpbGVfbmFtZS5maW5kKCIubXA0IikgIT0gLTE6IGV4dCA9ICJtcDQiCgkJZWxpZiBmaWxlX25hbWUuZmluZCgiLndlYm0iKSAhPSAtMTogZXh0ID0gIndlYm0iCgkJdmlkZW8gPSBvcGVuKGZpbGVfbmFtZSwgInJiIikKCQl2aWRlb19ieXRlcyA9IHZpZGVvLnJlYWQoKQoJCXZpZGVvLmNsb3NlKCkKCQlmaWxlX25hbWVfZGlzcGxheWVkID0gc3RyKCcnLmpvaW4oc3RyKHJhbmRvbS5yYW5kaW50KDAsIDkpKSBmb3IgXyBpbiByYW5nZShOQU1FX1NJWkUtMSkpICsgIjAiKQoJCWZpbGVfbmFtZV9kaXNwbGF5ZWQgKz0gc3RyKCIuIiArIGV4dCkKCQlzZWxmLnBhcmFtcy5hcHBlbmQoKCJmb3JtaW1hZ2VzW10iLCAoZmlsZV9uYW1lX2Rpc3BsYXllZCwgdmlkZW9fYnl0ZXMsIHN0cigidmlkZW8vIiArIGV4dCkpKSkKCWRlZiBzZXRfbWVkaWEoc2VsZiwgbWVkaWFOYW1lLCBtZWRpYSwgc2hha2FsUG93ZXI9MCwgc2hha2FsQ29sb3I9RmFsc2UsIHNoYWthbEFmZmluZT1GYWxzZSwgdG9QTkc9RmFsc2UpOgoJCWZpbGVfbmFtZV9kaXNwbGF5ZWQgPSBzdHIoJycuam9pbihzdHIocmFuZG9tLnJhbmRpbnQoMCwgOSkpIGZvciBfIGluIHJhbmdlKE5BTUVfU0laRS0xKSkgKyAiMCIpCgkJaWYgbWVkaWFOYW1lLmZpbmQoIi5qcGciKSAhPSAtMSBvciBtZWRpYU5hbWUuZmluZCgiLnBuZyIpICE9IC0xIG9yIG1lZGlhTmFtZS5maW5kKCIuZ2lmIikgIT0gLTEgb3IgbWVkaWFOYW1lLmZpbmQoIi5ibXAiKSAhPSAtMToKCQkJbWVkaWEgPSBzZWxmLnNoYWthbChpby5CeXRlc0lPKG1lZGlhKSwgc2hha2FsUG93ZXIsIHNoYWthbENvbG9yLCBzaGFrYWxBZmZpbmUsIHRvUE5HKQoJCQlpZiB0b1BORzoKCQkJCW1lZGlhVHlwZSA9ICJpbWFnZS9wbmciCgkJCQlmaWxlX25hbWVfZGlzcGxheWVkICs9ICIucG5nIgoJCQllbHNlOgoJCQkJbWVkaWFUeXBlID0gImltYWdlL2pwZWciCgkJCQlmaWxlX25hbWVfZGlzcGxheWVkICs9ICIuanBnIgoJCWVsaWYgbWVkaWFOYW1lLmZpbmQoIi5tcDQiKSAhPSAtMToKCQkJbWVkaWFUeXBlID0gInZpZGVvL21wNCIKCQkJZmlsZV9uYW1lX2Rpc3BsYXllZCArPSAiLm1wNCIKCQllbGlmIG1lZGlhTmFtZS5maW5kKCIud2VibSIpICE9IC0xOgoJCQltZWRpYVR5cGUgPSAidmlkZW8vd2VibSIKCQkJZmlsZV9uYW1lX2Rpc3BsYXllZCArPSAiLndlYm0iCgkJZWxzZToKCQkJbWVkaWFUeXBlID0gImltYWdlIgoJCQlmaWxlX25hbWVfZGlzcGxheWVkICs9ICIuanBnIgoJCXNlbGYucGFyYW1zLmFwcGVuZCgoImZvcm1pbWFnZXNbXSIsIChmaWxlX25hbWVfZGlzcGxheWVkLCBtZWRpYSwgbWVkaWFUeXBlKSkpCglkZWYgc2hha2FsKHNlbGYsIGlt
YWdlLCBwb3dlciwgY29sb3I9RmFsc2UsIGFmZmluZT1GYWxzZSwgdG9QTkc9RmFsc2UpOgoJCWltYWdlID0gUElMLkltYWdlLm9wZW4oaW1hZ2UpLmNvbnZlcnQoIlJHQkEiKQoJCXdpZHRoLCBoZWlnaHQgPSBpbWFnZS5zaXplCgkJZm9yIHggaW4gcmFuZ2UocG93ZXIpOiBpbWFnZS5wdXRwaXhlbCgocmFuZG9tLnJhbmRpbnQoMCwgd2lkdGgtMSksIHJhbmRvbS5yYW5kaW50KDAsIGhlaWdodC0xKSksIChyYW5kb20ucmFuZGludCgwLCAyNTUpLCByYW5kb20ucmFuZGludCgwLCAyNTUpLCByYW5kb20ucmFuZGludCgwLCAyNTUpKSkKCQlpZiBjb2xvcjoKCQkJcmVkID0gcmFuZG9tLnJhbmRpbnQoMCwgMjU1KQoJCQlkaWYgPSBhYnMocmVkIC0gMTI3KQoJCQlncmVlbiA9IHJhbmRvbS5yYW5kaW50KDAsIGRpZikKCQkJaWYgcmFuZG9tLnJhbmRpbnQoMCwgMSk6IGdyZWVuID0gMjU1IC0gZ3JlZW4KCQkJYmx1ZSA9IHJhbmRvbS5yYW5kaW50KG1heCgwLCAyNTUtcmVkLWdyZWVuKSwgbWluKDI1NSwgNTEwLXJlZC1ncmVlbikpCgkJCWlmIHJhbmRvbS5yYW5kaW50KDAsIDEpOiByZWQsIGdyZWVuID0gZ3JlZW4sIHJlZAoJCQlpZiByYW5kb20ucmFuZGludCgwLCAxKTogcmVkLCBibHVlID0gYmx1ZSwgcmVkCgkJCWlmIHJhbmRvbS5yYW5kaW50KDAsIDEpOiBibHVlLCBncmVlbiA9IGdyZWVuLCBibHVlCgkJCWxheWVyID0gUElMLkltYWdlLm5ldygiUkdCQSIsIGltYWdlLnNpemUsIChyZWQsIGdyZWVuLCBibHVlLCA2NSkpCgkJCWltYWdlLnBhc3RlKGxheWVyLCAoMCwgMCksIGxheWVyKQoJCWlmIGFmZmluZToKCQkJc2hha2FsID0gKDEgKyByYW5kb20ucmFuZGludCgwLCAxMDApLzEwMDAgLSAwLjA1LCAwICsgcmFuZG9tLnJhbmRpbnQoMCwgMTAwKS8xMDAwIC0gMC4wNSwgMSArIHJhbmRvbS5yYW5kaW50KDAsIDEwMCkvMTAwMCAtIDAuMDUsIDAgKyByYW5kb20ucmFuZGludCgwLCAxMDApLzEwMDAgLSAwLjA1LCAxICsgcmFuZG9tLnJhbmRpbnQoMCwgMTAwKS8xMDAwIC0gMC4wNSwgMCArIHJhbmRvbS5yYW5kaW50KDAsIDEwMCkvMTAwMCAtIDAuMDUpCgkJCWltYWdlID0gaW1hZ2UudHJhbnNmb3JtKGltYWdlLnNpemUsIFBJTC5JbWFnZS5BRkZJTkUsIHNoYWthbCwgcmVzYW1wbGU9UElMLkltYWdlLkJJQ1VCSUMpCgkJaW1hZ2UgPSBpbWFnZS5jcm9wKChyYW5kb20ucmFuZGludCgwLCBwb3dlciksIHJhbmRvbS5yYW5kaW50KDAsIHBvd2VyKSwgd2lkdGgtMSAtIHJhbmRvbS5yYW5kaW50KDAsIHBvd2VyKSwgaGVpZ2h0LTEgLSByYW5kb20ucmFuZGludCgwLCBwb3dlcikpKQoJCWlmIHRvUE5HOgoJCQlpbWFnZV9ieXRlcyA9IGlvLkJ5dGVzSU8oKQoJCQlpbWFnZS5zYXZlKGltYWdlX2J5dGVzLCAiUE5HIiwgcXVhbGl0eT0yMCArIHJhbmRvbS5yYW5kaW50KDEwLCAzMCksIG9wdGltaXplPWJvb2wocmFuZG9tLmdldHJhbmRiaXRzKDEpKSwgcHJvZ3Jlc3NpdmU9Ym9vbChyYW5kb20uZ2V0cmFuZGJpdHMoMSkpKQoJCWVsc2U6CgkJCWltYWdlID0gaW1hZ2UuY29udmVydCgiUkdCIikKCQkJaW1hZ2VfYnl0ZXMgPSBpby5CeXRlc0lPKCkKCQkJaW1hZ2Uuc2F2ZShpbWFnZV9ieXRlcywgIkpQRUciLCBxdWFsaXR5PTYwICsgcmFuZG9tLnJhbmRpbnQoMTAsIDMwKSwgb3B0aW1pemU9Ym9vbChyYW5kb20uZ2V0cmFuZGJpdHMoMSkpLCBwcm9ncmVzc2l2ZT1ib29sKHJhbmRvbS5nZXRyYW5kYml0cygxKSkpCgkJaW1hZ2UuY2xvc2UoKQoJCXJldHVybiBpbWFnZV9ieXRlcy5nZXR2YWx1ZSgpCglkZWYgc2VuZChzZWxmLCBUSU1FT1VULCBQQVVTRSk6CgkJcmVzcG9uc2UgPSB7fQoJCXRyeToKCQkJcHJpbnQoc2VsZi5wcm94eVsiaHR0cCJdLCAicG9zdGluZyIpCgkJCXdhaXRfdGltZSA9IHJhbmRvbS5yYW5kaW50KDYsIDE1KQoJCQl0aW1lLnNsZWVwKFBBVVNFKQoJCQlyZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vMmNoLmhrL21ha2FiYS9wb3N0aW5nLmZjZ2k/anNvbj0xIiwgZmlsZXM9c2VsZi5wYXJhbXMsIHByb3hpZXM9c2VsZi5wcm94eSwgaGVhZGVycz1zZWxmLmhlYWRlcnMsIHRpbWVvdXQ9VElNRU9VVCwgdmVyaWZ5PUZhbHNlKS5qc29uKCkKCQkJU3RhdHMuaW5jUG9zdHMoKQoJCQlTdGF0cy5wcmludFN0YXRzKGJhZHByb3hpZXMsIGZvcmJpZGRlbnByb3h5KQoJCQlyZXR1cm4gcmVzcG9uc2VbJ1N0YXR1cyddID09ICdPSycsIHJlc3BvbnNlCgkJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgoJCQlyZXR1cm4gRmFsc2UsIHJlc3BvbnNlCmNsYXNzIFdpcGVyOgoJZGVmIF9faW5pdF9fKHNlbGYsIHNldHVwLCBjYXRhbG9nLCB0aHJlYWRzKToKCQlwcmludCgiXG7Ql9CQINCR0KPQndCUINCYINCh0JDQk9CjLCDQl9CQINCn0JXQodCi0Kwg0Jgg0J7QotCS0JDQk9CjISIpCgkJc2VsZi5wcm94aWVzID0gW3Byb3h5WzotMV0gZm9yIHByb3h5IGluIG9wZW4oInByb3hpZXMiLCAiciIpLnJlYWRsaW5lcygpXQoJCXJhbmRvbS5zaHVmZmxlKHNlbGYucHJveGllcykKCQlTdGF0cy5zZXRQcm94aWVzKGxlbihzZWxmLnByb3hpZXMpKQoJCXNlbGYuYWdlbnRzID0gW2FnZW50WzotMV0gZm9yIGFnZW50IGluIG9wZW4oInVzZXJhZ2VudHMiKS5yZWFkbGluZXMoKV0KCQlzZWxmLmJvYXJkID0gc2V0dXAuYm9hcmQK
CQlzZWxmLnRocmVhZCA9IHNldHVwLnRocmVhZAoJCXNlbGYuc2V0dXAgPSBzZXR1cAoJCXNlbGYuY2F0YWxvZyA9IGNhdGFsb2cKCQlzZWxmLnRocmVhZHMgPSB0aHJlYWRzCgkJc2VsZi5zZXRfc29sdmVyKHNldHVwLnNvbHZlcikKCWRlZiBzZXRfc29sdmVyKHNlbGYsIHNvbHZlcik6CgkJY2FwdGNoYSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly8yY2guaGsvYXBpL2NhcHRjaGEvMmNoYXB0Y2hhL2lkP2JvYXJkPWImdGhyZWFkPTAiLCBoZWFkZXJzPXsiVXNlci1BZ2VudCI6IHNlbGYuYWdlbnRzWzBdfSwgdGltZW91dD1zZWxmLnNldHVwLlRJTUVPVVQsIHZlcmlmeT1GYWxzZSkuanNvbigpCgkJY2FwdGNoYUlEID0gY2FwdGNoYVsiaWQiXQoJCWltYWdlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovLzJjaC5oay9hcGkvY2FwdGNoYS8yY2hhcHRjaGEvaW1hZ2UvIiArIGNhcHRjaGFJRCwgaGVhZGVycz17IlVzZXItQWdlbnQiOiBzZWxmLmFnZW50c1swXX0sIHRpbWVvdXQ9c2VsZi5zZXR1cC5USU1FT1VULCB2ZXJpZnk9RmFsc2UpLmNvbnRlbnQKCQllcnJvciA9IG9wZW4oImVycm9yLmdpZiIsInJiIikKCQlpZiBUcnVlOiNpbWFnZSA9PSBlcnJvci5yZWFkKCk6CgkJCXNlbGYuY2FwdGNoYVR5cGUgPSAicmUiCgkJCWlmIHNvbHZlciA9PSAwOgoJCQkJc2VsZi5zb2x2ZXIgPSBDYXB0Y2hhU29sdmVyX1hDYXB0Y2hhX3JlKHNlbGYuc2V0dXAua2V5LCBzZWxmLnNldHVwLmtleXJlcSkKCQkJZWxpZiBzb2x2ZXIgPT0gMToKCQkJCXNlbGYuc29sdmVyID0gQ2FwdGNoYVNvbHZlcl9jYXB0Y2hhZ3VydV9yZShzZWxmLnNldHVwLmtleSwgc2VsZi5zZXR1cC5rZXlyZXEpCgkJCWVsaWYgc29sdmVyID09IDI6CgkJCQlzZWxmLnNvbHZlciA9IENhcHRjaGFTb2x2ZXJfYW50aWNhcHRjaGFfcmUoc2VsZi5zZXR1cC5rZXksIHNlbGYuc2V0dXAua2V5cmVxKQoJCWVsc2U6CgkJCXNlbGYuY2FwdGNoYVR5cGUgPSAiMmNoIgoJCQlpZiBzb2x2ZXIgPT0gMDoKCQkJCXNlbGYuc29sdmVyID0gQ2FwdGNoYVNvbHZlcl9YQ2FwdGNoYV8yY2goc2VsZi5zZXR1cC5rZXksIHNlbGYuc2V0dXAua2V5cmVxKQoJCQllbGlmIHNvbHZlciA9PSAxOgoJCQkJc2VsZi5zb2x2ZXIgPSBDYXB0Y2hhU29sdmVyX2NhcHRjaGFndXJ1XzJjaChzZWxmLnNldHVwLmtleSwgc2VsZi5zZXR1cC5rZXlyZXEpCgkJCWVsaWYgc29sdmVyID09IDI6CgkJCQlzZWxmLnNvbHZlciA9IENhcHRjaGFTb2x2ZXJfYW50aWNhcHRjaGFfMmNoKHNlbGYuc2V0dXAua2V5LCBzZWxmLnNldHVwLmtleXJlcSkKCWRlZiB0cmFwX3JlcGxhY2Uoc2VsZiwgdGV4dCk6CgkJaWYgYm9vbChyYW5kb20uZ2V0cmFuZGJpdHMoMSkpOgoJCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCLQkCIsICJBIikucmVwbGFjZSgi0LAiLCAiYSIpCgkJaWYgYm9vbChyYW5kb20uZ2V0cmFuZGJpdHMoMSkpOgoJCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCLQlSIsICJFIikucmVwbGFjZSgi0LUiLCAiZSIpCgkJaWYgYm9vbChyYW5kb20uZ2V0cmFuZGJpdHMoMSkpOgoJCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCLQniIsICJPIikucmVwbGFjZSgi0L4iLCAibyIpCgkJaWYgYm9vbChyYW5kb20uZ2V0cmFuZGJpdHMoMSkpOgoJCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCLQoCIsICJQIikucmVwbGFjZSgi0YAiLCAicCIpCgkJaWYgYm9vbChyYW5kb20uZ2V0cmFuZGJpdHMoMSkpOgoJCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCLQoSIsICJDIikucmVwbGFjZSgi0YEiLCAiYyIpCgkJaWYgYm9vbChyYW5kb20uZ2V0cmFuZGJpdHMoMSkpOgoJCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCLQpSIsICJYIikucmVwbGFjZSgi0YUiLCAieCIpCgkJaWYgYm9vbChyYW5kb20uZ2V0cmFuZGJpdHMoMSkpOgoJCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCLQkiIsICJCIikKCQlpZiBib29sKHJhbmRvbS5nZXRyYW5kYml0cygxKSk6CgkJCXRleHQgPSB0ZXh0LnJlcGxhY2UoItCcIiwgIk0iKQoJCWlmIGJvb2wocmFuZG9tLmdldHJhbmRiaXRzKDEpKToKCQkJdGV4dCA9IHRleHQucmVwbGFjZSgi0J0iLCAiSCIpCgkJaWYgYm9vbChyYW5kb20uZ2V0cmFuZGJpdHMoMSkpOgoJCQl0ZXh0ID0gdGV4dC5yZXBsYWNlKCLQoiIsICJUIikKCQlpZiBib29sKHJhbmRvbS5nZXRyYW5kYml0cygxKSk6CgkJCXRleHQgPSB0ZXh0LnJlcGxhY2UoItGDIiwgInkiKQoJCXJldHVybiB0ZXh0CglkZWYgc2VuZF9wb3N0KHNlbGYpOgoJCWlmIChsZW4oc2VsZi5wcm94aWVzKSA9PSAwKTogcmV0dXJuIEZhbHNlCgkJcHJveHkgPSBzZWxmLnByb3hpZXMucG9wKDApCgkJYWdlbnQgPSByYW5kb20uY2hvaWNlKHNlbGYuYWdlbnRzKQoJCXJlc3BvbnNlID0geyJFcnJvciI6ICJwcm94eSJ9CgkJY291bnRlciA9IDAKCQl0cnk6CgkJCXdoaWxlIGNvdW50ZXIgPCBzZWxmLnNldHVwLnByb3h5UmVwZWF0c0NvdW50OgoJCQkJaWYgc2VsZi5zZXR1cC5zaHJhcG5lbENoYXJnZSA9PSAwOgoJCQkJCXRocmVhZE51bSA9IDAKCQkJCQlpZiAoc2VsZi5zZXR1cC5jaGFvcyA9PSAiLTEiKToKCQkJCQkJdGhyZWFkID0gc2VsZi50aHJlYWRzWzBdCgkJCQkJZWxzZToKCQkJCQkJdGhyZWFkID0gc2VsZi5zZXR1cC50YXJnZXRUaHJlYWQKCQkJCWVsc2U6CgkJCQkJdGhyZWFkTnVtID0gcmFu
ZG9tLnJhbmRpbnQoMCwgc2VsZi5zZXR1cC5zaHJhcG5lbENoYXJnZS0xKQoJCQkJCWlmIChzZWxmLnNldHVwLmNoYW9zID09ICItMSIpOgoJCQkJCQl0aHJlYWQgPSBzZWxmLnRocmVhZHNbdGhyZWFkTnVtXQoJCQkJCWVsaWYgKHNlbGYuc2V0dXAuY2hhb3MgPT0gIjAiKToKCQkJCQkJdGhyZWFkID0gc2VsZi50aHJlYWRzW3JhbmRvbS5yYW5kaW50KDAsIGxlbihzZWxmLnRocmVhZHMpLTEpXQoJCQkJCWVsc2U6CgkJCQkJCXRocmVhZCA9IHNlbGYuc2V0dXAudGFyZ2V0VGhyZWFkCgkJCQlwb3N0ID0gTmV3UG9zdChwcm94eSwgYWdlbnQsIHNlbGYuYm9hcmQsIHRocmVhZC5JRCwgc2VsZi5zb2x2ZXIsIHNlbGYuY2FwdGNoYVR5cGUpCgkJCQlpZiAocG9zdC5wcmVwYXJlKHNlbGYuc2V0dXAuVElNRU9VVCkpOgoJCQkJCWNoYXJudW0gPSByYW5kb20ucmFuZGludCgxLCAxMDApCgkJCQkJaWYgc2VsZi50aHJlYWQgIT0gIjAiOgoJCQkJCQlibGFja19hbnVzID0gcmFuZG9tLnJhbmRpbnQoMSwgbGVuKHRocmVhZC5wb3N0cyktMSkKCQkJCQkJd2hpdGVfYW51cyA9IHJhbmRvbS5yYW5kaW50KDAsIGxlbihzZWxmLnRocmVhZHNbdGhyZWFkTnVtXS5wb3N0cyktMSkKCQkJCQlpZiBzZWxmLnNldHVwLnRyaWdnZXJGb3JtID09IDE6CgkJCQkJCXRyaWdnZXIgPSAiPj4iICsgdGhyZWFkLmxhc3RJRCArICdcbicKCQkJCQllbGlmIHNlbGYuc2V0dXAudHJpZ2dlckZvcm0gPT0gMjoKCQkJCQkJdHJpZ2dlciA9ICI+PiIgKyB0aHJlYWQucG9zdHNbYmxhY2tfYW51c10uSUQgKyAnXG4nCgkJCQkJZWxpZiBzZWxmLnNldHVwLnRyaWdnZXJGb3JtID09IDM6CgkJCQkJCXRyaWdnZXIgPSB0aHJlYWQubG9hZiArICdcbicKCQkJCQllbGlmIHNlbGYuc2V0dXAudHJpZ2dlckZvcm0gPT0gNDoKCQkJCQkJdHJpZ2dlciA9ICI+PiIgKyB0aHJlYWQucG9zdHNbMF0uSUQgKyAnXG4nCgkJCQkJZWxpZiBzZWxmLnNldHVwLnRyaWdnZXJGb3JtID09IDA6CgkJCQkJCXRyaWdnZXIgPSAiIgoJCQkJCWlmIHNlbGYuc2V0dXAubW9kZSA9PSAxOgoJCQkJCQlwb3N0LnNldF90ZXh0KHRyaWdnZXIgKyBzZWxmLnNldHVwLnBhc3Rlc1tyYW5kb20ucmFuZGludCgwLCA5KV0pCgkJCQkJZWxpZiBzZWxmLnNldHVwLm1vZGUgPT0gMjoKCQkJCQkJcG9zdC5zZXRfdGV4dCh0cmlnZ2VyKQoJCQkJCWVsaWYgc2VsZi5zZXR1cC5tb2RlID09IDA6CgkJCQkJCXBvc3Quc2V0X3RleHQodHJpZ2dlciArICcnLmpvaW4ocmFuZG9tLmNob2ljZShURVhUX0NIQVJTKSBmb3IgXyBpbiByYW5nZShjaGFybnVtKSkpCgkJCQkJZWxpZiBzZWxmLnNldHVwLm1vZGUgPT0gMzoKCQkJCQkJcG9zdC5zZXRfdGV4dCh0cmlnZ2VyICsgKCI+ICIgKyB0aHJlYWQucG9zdHNbYmxhY2tfYW51c10uY29tbWVudCkucmVwbGFjZSgiXG4iLCAiXG4+ICIpLnJlcGxhY2UoIlxuPiBcbiIsICJcblxuIikpCgkJCQkJZWxpZiBzZWxmLnNldHVwLm1vZGUgPT0gNDoKCQkJCQkJcG9zdC5zZXRfdGV4dCh0cmlnZ2VyICsgc2VsZi50cmFwX3JlcGxhY2Uoc2VsZi5zZXR1cC5wYXN0ZXNbcmFuZG9tLnJhbmRpbnQoMCwgbGVuKHNlbGYuc2V0dXAucGFzdGVzKS0xKV0pKQoJCQkJCWVsaWYgc2VsZi5zZXR1cC5tb2RlID09IDU6CgkJCQkJCXBvc3Quc2V0X3RleHQodHJpZ2dlciArICJodHRwczovLzJjaC5oayIgKyAiL2IvcmVzL01aeDdXMDVKMmNoLmhrIiAqIDUwMCkKCQkJCQllbGlmIHNlbGYuc2V0dXAubW9kZSA9PSA2OgoJCQkJCQlwb3N0LnNldF90ZXh0KHRyaWdnZXIgKyBzZWxmLnRyYXBfcmVwbGFjZShzZWxmLnNldHVwLmJpZ1Bhc3RlKSkKCQkJCQllbGlmIHNlbGYuc2V0dXAubW9kZSA9PSA3OgoJCQkJCQlwb3N0LnNldF90ZXh0KHRyaWdnZXIgKyBzZWxmLnRyYXBfcmVwbGFjZShzZWxmLnRocmVhZHNbdGhyZWFkTnVtXS5wb3N0c1t3aGl0ZV9hbnVzXS5jb21tZW50KSkKCQkJCQllbGlmIHNlbGYuc2V0dXAubW9kZSA9PSA4OgoJCQkJCQlwb3N0LnNldF90ZXh0KHRyaWdnZXIgKyBzZWxmLnNldHVwLnBhc3Rlc1tyYW5kb20ucmFuZGludCgwLCBsZW4oc2VsZi5zZXR1cC5wYXN0ZXMpLTEpXS5yZXBsYWNlKCJCQU5OVU1CRVIiLCBzdHIocmFuZG9tLnJhbmRpbnQoc2VsZi5zZXR1cC5taW5CYW4sIHNlbGYuc2V0dXAubWF4QmFuKSkpKQoJCQkJCWlmIHNlbGYuc2V0dXAubWVkaWFLaW5kID4gMDoKCQkJCQkJdHJ5OgoJCQkJCQkJaWYgc2VsZi5zZXR1cC5tZWRpYUtpbmQgPT0gMzoKCQkJCQkJCQlpZiBzZWxmLnNldHVwLnNocmFwbmVsQ2hhcmdlICE9IDA6CgkJCQkJCQkJCW1lZGlhc0NvdW50ID0gbWluKGxlbihzZWxmLnRocmVhZHNbdGhyZWFkTnVtXS5wb3N0c1t3aGl0ZV9hbnVzXS5tZWRpYXMpLCA0KQoJCQkJCQkJCQlmb3IgbWVkaWEgaW4gc2VsZi50aHJlYWRzW3RocmVhZE51bV0ucG9zdHNbd2hpdGVfYW51c10ubWVkaWFzOgoJCQkJCQkJCQkJcHJpbnQoItCh0LrQsNGH0LjQstCw0Y4iLCBtZWRpYS5uYW1lLCAiKCIrc3RyKHdoaXRlX2FudXMrMSkrIiDQv9C+0YHRgiAiK3NlbGYudGhyZWFkc1t0aHJlYWROdW1dLklEKyIg0YLRgNC10LTQsCkiKQoJCQkJCQkJCQkJbWVkaWEuZG93bmxvYWQoKQoJCQkJCQkJCWVsc2U6CgkJCQkJCQkJCW1lZGlhc0NvdW50ID0gbWluKGxlbihzZWxmLnRocmVh
ZHNbdGhyZWFkTnVtXS5wb3N0c1t3aGl0ZV9hbnVzXS5tZWRpYXMpLCA0KQoJCQkJCQkJZWxzZToKCQkJCQkJCQltZWRpYXNDb3VudCA9IHNlbGYuc2V0dXAubWVkaWFzQ291bnQKCgkJCQkJCQlmb3IgbWVkaWFOdW0gaW4gcmFuZ2UobWVkaWFzQ291bnQpOgoJCQkJCQkJCWlmIHNlbGYuc2V0dXAubWVkaWFLaW5kICE9IDM6CgkJCQkJCQkJCWJsdWVfYW51cyA9IHJhbmRvbS5yYW5kaW50KDAsIGxlbihzZWxmLnNldHVwLm1lZGlhUGF0aHMpLTEpCgkJCQkJCQkJaWYgc2VsZi5zZXR1cC5tZWRpYUtpbmQgPT0gMToKCQkJCQkJCQkJcG9zdC5zZXRfaW1hZ2Uoc2VsZi5zZXR1cC5tZWRpYVBhdGhzW2JsdWVfYW51c10sIHNlbGYuc2V0dXAuc2hha2FsUG93ZXIsIHNlbGYuc2V0dXAuc2hha2FsQ29sb3IsIHNlbGYuc2V0dXAuc2hha2FsQWZmaW5lLCBzZWxmLnNldHVwLnRvUE5HKQoJCQkJCQkJCWVsaWYgc2VsZi5zZXR1cC5tZWRpYUtpbmQgPT0gMjoKCQkJCQkJCQkJcG9zdC5zZXRfdmlkZW8oc2VsZi5zZXR1cC5tZWRpYVBhdGhzW2JsdWVfYW51c10pCgkJCQkJCQkJZWxpZiBzZWxmLnNldHVwLm1lZGlhS2luZCA9PSAzOgoJCQkJCQkJCQlwb3N0LnNldF9tZWRpYShzZWxmLnRocmVhZHNbdGhyZWFkTnVtXS5wb3N0c1t3aGl0ZV9hbnVzXS5tZWRpYXNbbWVkaWFOdW1dLm5hbWUsIHNlbGYudGhyZWFkc1t0aHJlYWROdW1dLnBvc3RzW3doaXRlX2FudXNdLm1lZGlhc1ttZWRpYU51bV0uZmlsZSwgc2VsZi5zZXR1cC5zaGFrYWxQb3dlciwgc2VsZi5zZXR1cC5zaGFrYWxDb2xvciwgc2VsZi5zZXR1cC5zaGFrYWxBZmZpbmUsIHNlbGYuc2V0dXAudG9QTkcpCgkJCQkJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZToKCQkJCQkJCXByaW50KCLQndC1INC80L7Qs9GDINGB0LrQsNGH0LDRgtGMIC8g0L/RgNC40LrRgNC10L/QuNGC0Ywg0YTQsNC50LsuIikKCQkJCQlpZiBzZWxmLnNldHVwLnNhZ2VNb2RlID09IDI6CgkJCQkJCWlmIHNlbGYudGhyZWFkc1t0aHJlYWROdW1dLnBvc3RzW3doaXRlX2FudXNdLnNhZ2UgPT0gVHJ1ZToKCQkJCQkJCXBvc3Quc2V0X3NhZ2UoKQoJCQkJCQllbHNlOgoJCQkJCQkJcG9zdC5wYXJhbXMuYXBwZW5kKCgiZW1haWwiLCAoTm9uZSwgIiIpKSkKCQkJCQllbGlmIHNlbGYuc2V0dXAuc2FnZU1vZGUgPT0gMToKCQkJCQkJcG9zdC5zZXRfc2FnZSgpCgkJCQkJZWxpZiBzZWxmLnNldHVwLnNhZ2VNb2RlID09IDA6CgkJCQkJCXBvc3QucGFyYW1zLmFwcGVuZCgoImVtYWlsIiwgKE5vbmUsICIiKSkpCgkJCQkJc3VjY2VzcywgcmVzcG9uc2UgPSBwb3N0LnNlbmQoc2VsZi5zZXR1cC5USU1FT1VULCBzZWxmLnNldHVwLlBBVVNFKQoJCQkJCWlmIHN1Y2Nlc3M6CgkJCQkJCVN0YXRzLmluY1Bvc3RzKCkKCQkJCQkJcG9zdF9pZCA9IDAKCQkJCQkJdHJ5OgoJCQkJCQkJcG9zdF9pZCA9IHJlc3BvbnNlWyJUYXJnZXQiXQoJCQkJCQlleGNlcHQ6CgkJCQkJCQlwb3N0X2lkID0gcmVzcG9uc2VbIk51bSJdCgkJCQkJCWlmIHNlbGYuc2V0dXAuc2hyYXBuZWxDaGFyZ2UgPT0gMDoKCQkJCQkJCXByaW50KHByb3h5KyIgLSBzdWNjZXNzLiBQb3N0IGlkOiAiK3N0cihwb3N0X2lkKSkKCQkJCQkJZWxzZToKCQkJCQkJCXByaW50KHByb3h5KyIgLSBzdWNjZXNzLiBQb3N0IGlkOiAiK3N0cihwb3N0X2lkKSsiICgiK3RocmVhZC5JRCsiIHRocmVhZCkiKQoJCQkJCQlpZiBzZWxmLnNldHVwLnRocmVhZCAhPSAiMCI6CgkJCQkJCQlzZWxmLnRocmVhZHNbdGhyZWFkTnVtXS5sYXN0SUQgPSBzdHIocG9zdF9pZCkKCQkJCQkJcHJpbnQoc3RyKHNlbGYuc2V0dXAucHJveHlSZXBlYXRzQ291bnQtY291bnRlcikrIiBMT09QUyBMRUZUIikKCQkJCQkJY291bnRlciArPSAxCgkJCQkJZWxzZToKCQkJCQkJcHJpbnQocHJveHksICJwb3N0aW5nIGZhaWxlZCAtIiwgcmVzcG9uc2UpCgkJCQkJCXRyeToKCQkJCQkJCWlmIHJlc3BvbnNlWyJFcnJvciJdID09IC02OgoJCQkJCQkJCXByaW50KCLQl9Cw0LHQsNC90LjQu9C4LCDRgdGD0LrQuC4uLiAiK3Byb3h5KyIg0LIg0L/Qu9C+0YXQvtC5INC70LjRgdGCIikKCQkJCQkJCQliYWRwcm94aWVzLmFwcGVuZChwcm94eSkKCQkJCQkJCQlpZiBsZW4oc2VsZi5wcm94aWVzKSA9PSAwOgoJCQkJCQkJCQlwcmludCgi0JfQsNC60L7QvdGH0LjQu9C40YHRjCDQv9GA0L7QutGB0LjRh9C60LghIikKCQkJCQkJCQkJY291bnRlciA9IHNlbGYuc2V0dXAucHJveHlSZXBlYXRzQ291bnQKCQkJCQkJCQllbHNlOgoJCQkJCQkJCQlwcm94eSA9IHNlbGYucHJveGllcy5wb3AoMCkKCQkJCQkJCQkJY291bnRlciA9IDAKCQkJCQkJCWVsaWYgcmVzcG9uc2VbIkVycm9yIl0gPT0gLTQ6CgkJCQkJCQkJcHJpbnQoItCX0LDQvdC+0YHQuNC8ICIrcHJveHkrIiDQsiBmb3JiaWRkZW4uY3N2IikKCQkJCQkJCQliYWRwcm94aWVzLmFwcGVuZChwcm94eSkKCQkJCQkJCQlmb3JiaWRkZW5wcm94eS5hcHBlbmQocHJveHkpCgkJCQkJCQkJaWYgbGVuKHNlbGYucHJveGllcykgPT0gMDoKCQkJCQkJCQkJcHJpbnQoItCX0LDQutC+0L3Rh9C40LvQuNGB0Ywg0L/RgNC+0LrRgdC40YfQutC4ISIpCgkJCQkJCQkJCWNvdW50ZXIgPSBzZWxmLnNldHVwLnByb3h5UmVwZWF0c0NvdW50CgkJCQkJCQkJZWxzZToKCQkJCQkJCQkJcHJveHkg
PSBzZWxmLnByb3hpZXMucG9wKDApCgkJCQkJCQkJCWNvdW50ZXIgPSAwCgkJCQkJCQllbGlmIHJlc3BvbnNlWyJFcnJvciJdID09IC03OgoJCQkJCQkJCWlmIHNlbGYuc2V0dXAuc2hyYXBuZWxDaGFyZ2UgPT0gMDoKCQkJCQkJCQkJcHJpbnQoItCc0L7Rh9CwINCy0YvRh9C40YnQsNC10YIg0YLRgNC10LQuINCa0J7QndCn0JDQri4iKQoJCQkJCQkJCQlzYWZlX3F1aXQoYmFkcHJveGllcywgZm9yYmlkZGVucHJveHkpCgkJCQkJCQkJZWxzZToKCQkJCQkJCQkJcHJpbnQoItCi0YDQtdC0ICIrc2VsZi50aHJlYWRzW3RocmVhZE51bV0uSUQrIiDQt9Cw0LrRgNGL0LvRgdGPLiIpCgkJCQkJCQkJCWRlbCBzZWxmLnRocmVhZHNbdGhyZWFkTnVtXQoJCQkJCQkJCQlpZiBsZW4oc2VsZi50aHJlYWRzKSA9PSAwOgoJCQkJCQkJCQkJcHJpbnQoItCS0YHQtSDRgtGA0LXQtNGLINC30LDQutGA0YvRgtGLLiDQptC1INC/0LXRgNC10LzQvtCz0LAuIikKCQkJCQkJCQkJCXNhZmVfcXVpdChiYWRwcm94aWVzLCBmb3JiaWRkZW5wcm94eSkKCQkJCQkJCWVsaWYgbm90IHJlc3BvbnNlOgoJCQkJCQkJCXByaW50KCLQntGI0LjQsdC60LAg0YHQtdGC0LgsINC/0YDQvtCx0YPQtdC8INC10YnRkSDRgNCw0LcuLi4iKQoJCQkJCQlleGNlcHQgRXhjZXB0aW9uOgoJCQkJCQkJaWYgbGVuKHJlc3BvbnNlKSA+IDA6CgkJCQkJCQkJcHJpbnQoItCi0LDQudC80LDRg9GCLi4uICIrcHJveHkrIiDQsiDQv9C70L7RhdC+0Lkg0LvQuNGB0YIiKQoJCQkJCQkJCWJhZHByb3hpZXMuYXBwZW5kKHByb3h5KQoJCQkJCQkJCWlmIGxlbihzZWxmLnByb3hpZXMpID09IDA6CgkJCQkJCQkJCXByaW50KCLQl9Cw0LrQvtC90YfQuNC70LjRgdGMINC/0YDQvtC60YHQuNGH0LrQuCEiKQoJCQkJCQkJCQljb3VudGVyID0gc2VsZi5zZXR1cC5wcm94eVJlcGVhdHNDb3VudAoJCQkJCQkJCWVsc2U6CgkJCQkJCQkJCXByb3h5ID0gc2VsZi5wcm94aWVzLnBvcCgwKQoJCQkJCQkJCQljb3VudGVyID0gMAoJCQlpZiBub3QgcHJveHkgaW4gYmFkcHJveGllczoKCQkJCXNlbGYucHJveGllcy5wdXNoKHByb3h5KQoKCQlleGNlcHQgRXhjZXB0aW9uIGFzIGU6CgkJCXByaW50KGUpCgkJcmV0dXJuIFRydWUKCWRlZiB3aXBlKHNlbGYsIHRocmVhZF9jb3VudCk6CgkJU3RhdHMuc2V0bnVtT2ZUaHJlYWRzKHRocmVhZF9jb3VudCkKCQljbGFzcyBXaXBlclRocmVhZCh0aHJlYWRpbmcuVGhyZWFkKToKCQkJZGVmIF9faW5pdF9fKHNlbGYsIHdpcGVyKToKCQkJCXRocmVhZGluZy5UaHJlYWQuX19pbml0X18oc2VsZikKCQkJCXNlbGYud2lwZXIgPSB3aXBlcgoJCQlkZWYgcnVuKHNlbGYpOgoJCQkJc2VsZi53aXBlci5zZW5kX3Bvc3QoKQoJCWNsYXNzIElucHV0VGhyZWFkKHRocmVhZGluZy5UaHJlYWQpOgoJCQlkZWYgX19pbml0X18oc2VsZik6CgkJCQl0aHJlYWRpbmcuVGhyZWFkLl9faW5pdF9fKHNlbGYpCgkJCWRlZiBydW4oc2VsZik6CgkJCQlTdGF0cy5wcmludFN0YXRzKGJhZHByb3hpZXMsIGZvcmJpZGRlbnByb3h5KQoJCQkJZXRlcm5hbF9pbnB1dChiYWRwcm94aWVzLCBmb3JiaWRkZW5wcm94eSkKCQl0aHJlYWRzID0gW10KCQlpbnRociA9IElucHV0VGhyZWFkKCkKCQlpbnRoci5zdGFydCgpCgkJZm9yIGkgaW4gcmFuZ2UodGhyZWFkX2NvdW50KToKCQkJdGhyZWFkcy5hcHBlbmQoV2lwZXJUaHJlYWQoc2VsZikpCgkJCXRocmVhZHNbLTFdLnN0YXJ0KCkKCQlmb3IgaSBpbiByYW5nZShsZW4odGhyZWFkcykpOgoJCQl0aHJlYWRzW2ldLmpvaW4oKQp0cnk6CglzaG93X2xvZ28oKQoJc2V0dXAgPSBTZXR1cChzeXMuYXJndikKCVdpcGVyT2JqID0gV2lwZXIoc2V0dXAsIHNldHVwLmNhdGFsb2csIHNldHVwLnRocmVhZHMpCglzaWduYWwuc2lnbmFsKHNpZ25hbC5TSUdJTlQsIHNhZmVfcXVpdCkKCVdpcGVyT2JqLndpcGUoc2V0dXAucG90b2Nrc0NvdW50KQoJc2FmZV9xdWl0KGJhZHByb3hpZXMsIGZvcmJpZGRlbnByb3h5KQpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CglwcmludCgiYXJlbGl2ZSBvYm9zcmFsc3lhIikKCWlucHV0KCkK
